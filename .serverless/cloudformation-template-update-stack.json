{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "AuthAppSyncSourceLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tasq-api-dev-AuthAppSyncSource",
        "RetentionInDays": 14
      }
    },
    "GenPersAccTokenSyncSourceLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tasq-api-dev-GenPersAccTokenSyncSource",
        "RetentionInDays": 14
      }
    },
    "GetPersAccTokenSyncSourceLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tasq-api-dev-GetPersAccTokenSyncSource",
        "RetentionInDays": 14
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "tasq-api",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tasq-api-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tasq-api-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "tasq-api",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "AuthAppSyncSourceLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-bucket-main",
          "S3Key": "tasq-api/serverless/tasq-api/dev/1595396455064-2020-07-22T05:40:55.064Z/tasq-api.zip"
        },
        "FunctionName": "tasq-api-dev-AuthAppSyncSource",
        "Handler": "src/functions/appsync_resolver/appsync_sources.authorize_api_user",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 30,
        "Description": "Lambda data-source for appsync endpoint: Authorize api user",
        "Tags": [
          {
            "Key": "Environment",
            "Value": "dev"
          },
          {
            "Key": "VersionTag",
            "Value": "v1-78-g46388a3"
          }
        ],
        "Environment": {
          "Variables": {
            "CentralLoggerStackName": "tasq-central-logger-dev",
            "IamNetworkStackName": "tasq-aws-iam-networking-dev",
            "MetaDataStoreStackName": "tasq-meta-datastore-dev",
            "WellStateS3BucketName": "tasq-well-state-worker-dev",
            "PredictionsTableStackName": "tasq-detect-state-change-dev",
            "FailureTableStackName": "tasq-failure-prediction-dev",
            "RawScadaIngestStackName": "tasq-raw-scada-ingest-enerplus-dev",
            "CleanScadaIngestStackName": "tasq-clean-scada-ingest-enerplus-dev",
            "StackMainUserId": "711589413744",
            "EcrAddress": "711589413744.dkr.ecr.us-east-2.amazonaws.com",
            "InboundStackName": "tasq-feature-extract-dev",
            "LambdaLayerStack": "tasq-lambda-layers-dev",
            "DetectStateChangeStackName": "tasq-detect-state-change-dev",
            "TasqAnalyticsStackName": "tasq-analytics-dev",
            "AssignUserTasqStackName": "tasq-assign-user-tasks-dev",
            "API_GATEWAY_TOKENS_TABLE": {
              "Ref": "ApiGatewayTokensTable"
            }
          }
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::ImportValue": "tasq-aws-iam-networking-dev:EcsContainerSecurityGroup"
            }
          ],
          "SubnetIds": [
            {
              "Fn::ImportValue": "tasq-aws-iam-networking-dev:MainSubnet1"
            },
            {
              "Fn::ImportValue": "tasq-aws-iam-networking-dev:MainSubnet2"
            }
          ]
        },
        "Layers": [
          {
            "Fn::ImportValue": "tasq-lambda-layers-dev:TasqloggingLambdaLayer"
          }
        ]
      },
      "DependsOn": [
        "AuthAppSyncSourceLogGroup"
      ]
    },
    "GenPersAccTokenSyncSourceLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-bucket-main",
          "S3Key": "tasq-api/serverless/tasq-api/dev/1595396455064-2020-07-22T05:40:55.064Z/tasq-api.zip"
        },
        "FunctionName": "tasq-api-dev-GenPersAccTokenSyncSource",
        "Handler": "src/functions/appsync_resolver/appsync_sources.create_new_auth_token",
        "MemorySize": 192,
        "Role": {
          "Fn::GetAtt": [
            "AppSyncSourceLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 30,
        "Description": "Lambda data-source for appsync endpoint: Generate a personal access token",
        "Tags": [
          {
            "Key": "Environment",
            "Value": "dev"
          },
          {
            "Key": "VersionTag",
            "Value": "v1-78-g46388a3"
          }
        ],
        "Environment": {
          "Variables": {
            "CentralLoggerStackName": "tasq-central-logger-dev",
            "IamNetworkStackName": "tasq-aws-iam-networking-dev",
            "MetaDataStoreStackName": "tasq-meta-datastore-dev",
            "WellStateS3BucketName": "tasq-well-state-worker-dev",
            "PredictionsTableStackName": "tasq-detect-state-change-dev",
            "FailureTableStackName": "tasq-failure-prediction-dev",
            "RawScadaIngestStackName": "tasq-raw-scada-ingest-enerplus-dev",
            "CleanScadaIngestStackName": "tasq-clean-scada-ingest-enerplus-dev",
            "StackMainUserId": "711589413744",
            "EcrAddress": "711589413744.dkr.ecr.us-east-2.amazonaws.com",
            "InboundStackName": "tasq-feature-extract-dev",
            "LambdaLayerStack": "tasq-lambda-layers-dev",
            "DetectStateChangeStackName": "tasq-detect-state-change-dev",
            "TasqAnalyticsStackName": "tasq-analytics-dev",
            "AssignUserTasqStackName": "tasq-assign-user-tasks-dev",
            "API_GATEWAY_TOKENS_TABLE": {
              "Ref": "ApiGatewayTokensTable"
            }
          }
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::ImportValue": "tasq-aws-iam-networking-dev:EcsContainerSecurityGroup"
            }
          ],
          "SubnetIds": [
            {
              "Fn::ImportValue": "tasq-aws-iam-networking-dev:MainSubnet1"
            },
            {
              "Fn::ImportValue": "tasq-aws-iam-networking-dev:MainSubnet2"
            }
          ]
        }
      },
      "DependsOn": [
        "GenPersAccTokenSyncSourceLogGroup",
        "AppSyncSourceLambdaRole"
      ]
    },
    "GetPersAccTokenSyncSourceLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-bucket-main",
          "S3Key": "tasq-api/serverless/tasq-api/dev/1595396455064-2020-07-22T05:40:55.064Z/tasq-api.zip"
        },
        "FunctionName": "tasq-api-dev-GetPersAccTokenSyncSource",
        "Handler": "src/functions/appsync_resolver/appsync_sources.get_auth_token",
        "MemorySize": 192,
        "Role": {
          "Fn::GetAtt": [
            "AppSyncSourceLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 30,
        "Description": "Lambda data-source for appsync endpoint: Get personal access token",
        "Tags": [
          {
            "Key": "Environment",
            "Value": "dev"
          },
          {
            "Key": "VersionTag",
            "Value": "v1-78-g46388a3"
          }
        ],
        "Environment": {
          "Variables": {
            "CentralLoggerStackName": "tasq-central-logger-dev",
            "IamNetworkStackName": "tasq-aws-iam-networking-dev",
            "MetaDataStoreStackName": "tasq-meta-datastore-dev",
            "WellStateS3BucketName": "tasq-well-state-worker-dev",
            "PredictionsTableStackName": "tasq-detect-state-change-dev",
            "FailureTableStackName": "tasq-failure-prediction-dev",
            "RawScadaIngestStackName": "tasq-raw-scada-ingest-enerplus-dev",
            "CleanScadaIngestStackName": "tasq-clean-scada-ingest-enerplus-dev",
            "StackMainUserId": "711589413744",
            "EcrAddress": "711589413744.dkr.ecr.us-east-2.amazonaws.com",
            "InboundStackName": "tasq-feature-extract-dev",
            "LambdaLayerStack": "tasq-lambda-layers-dev",
            "DetectStateChangeStackName": "tasq-detect-state-change-dev",
            "TasqAnalyticsStackName": "tasq-analytics-dev",
            "AssignUserTasqStackName": "tasq-assign-user-tasks-dev",
            "API_GATEWAY_TOKENS_TABLE": {
              "Ref": "ApiGatewayTokensTable"
            }
          }
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::ImportValue": "tasq-aws-iam-networking-dev:EcsContainerSecurityGroup"
            }
          ],
          "SubnetIds": [
            {
              "Fn::ImportValue": "tasq-aws-iam-networking-dev:MainSubnet1"
            },
            {
              "Fn::ImportValue": "tasq-aws-iam-networking-dev:MainSubnet2"
            }
          ]
        }
      },
      "DependsOn": [
        "GetPersAccTokenSyncSourceLogGroup",
        "AppSyncSourceLambdaRole"
      ]
    },
    "AppsyncAccessDynamoDB": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "dynamodb.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole",
          "arn:aws:iam::aws:policy/AWSLambdaInvocation-DynamoDB",
          "arn:aws:iam::aws:policy/SecretsManagerReadWrite",
          "arn:aws:iam::711589413744:policy/FullCognitoIdentityAccess",
          "arn:aws:iam::aws:policy/AmazonCognitoPowerUser"
        ]
      }
    },
    "AppSyncSourceLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AWSLambdaExecute",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess",
          "arn:aws:iam::aws:policy/SecretsManagerReadWrite",
          "arn:aws:iam::711589413744:policy/FullCognitoIdentityAccess",
          "arn:aws:iam::aws:policy/AmazonCognitoPowerUser",
          "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        ],
        "Policies": [
          {
            "PolicyName": "Lambda-AppSyncSourceSecrets-Policy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "secretsmanager:GetSecretValue",
                    "secretsmanager:ListSecrets",
                    "secretsmanager:ListSecretVersionIds"
                  ],
                  "Resource": [
                    "arn:aws:secretsmanager:us-east-2:711589413744:secret:influx/enerplus/dev/cloud-EENOZI"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "AppSyncLambdaServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "appsync.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "Lambda-AppSyncServiceRole-Policy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:invokeFunction"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "AppSyncPushToCloudwatchRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "appsync.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs",
          "arn:aws:iam::aws:policy/SecretsManagerReadWrite",
          "arn:aws:iam::711589413744:policy/FullCognitoIdentityAccess",
          "arn:aws:iam::aws:policy/AmazonCognitoPowerUser"
        ]
      }
    },
    "RestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "API-dev"
      }
    },
    "RestApiAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerCredentials": {
          "Fn::GetAtt": [
            "RestApiAuthorizerRole",
            "Arn"
          ]
        },
        "AuthorizerResultTtlInSeconds": 300,
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:aws:apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              "arn:aws:lambda:us-east-2:711589413744:function:tasq-api-dev-AuthAppSyncSource",
              "/invocations"
            ]
          ]
        },
        "IdentitySource": "method.request.header.Authorization",
        "Name": "api-authorizer",
        "RestApiId": {
          "Ref": "RestApi"
        },
        "Type": "TOKEN"
      }
    },
    "AuthLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": "dynamodb",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "1",
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetItem"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:dynamodb:",
                          {
                            "Ref": "AWS::Region"
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":table/auth-token"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "RestApiAuthorizerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "apigateway.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "lambda",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "lambda:invokeFunction",
                  "Resource": [
                    "arn:aws:lambda:us-east-2:711589413744:function:tasq-api-dev-AuthAppSyncSource"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "Model": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "ContentType": "application/json",
        "Name": "user",
        "RestApiId": {
          "Ref": "RestApi"
        },
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "user",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "name"
          ]
        }
      }
    },
    "StageV1Deployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": "ProfileResource",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        }
      }
    },
    "StageV1": {
      "Type": "AWS::ApiGateway::Stage",
      "DependsOn": "StageV1Deployment",
      "Properties": {
        "StageName": "v1",
        "Description": "API Version 1",
        "DeploymentId": {
          "Ref": "StageV1Deployment"
        },
        "RestApiId": {
          "Ref": "RestApi"
        }
      }
    },
    "ApiCustomDomainMapping": {
      "Type": "AWS::ApiGateway::BasePathMapping",
      "Properties": {
        "BasePath": "v1",
        "DomainName": "dev-api.tasqinc.com",
        "RestApiId": {
          "Ref": "RestApi"
        },
        "Stage": {
          "Ref": "StageV1"
        }
      }
    },
    "TasqsResource": {
      "Type": "AWS::ApiGateway::Resource",
      "DependsOn": "RestApi",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "RestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "tasqs"
      }
    },
    "GetTasqsLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::ImportValue": "tasq-detect-state-change-dev:GetTasqsAppSyncSource"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "RestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "GetTasqs": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "GetTasqsLambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RestApiAuthorizer"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "TasqsResource"
        },
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::ImportValue": "tasq-detect-state-change-dev:GetTasqsAppSyncSource"
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"team\": \"$input.params('team')\",\"user_email\": \"$input.params('username')\"}"
          }
        },
        "RequestModels": {
          "application/json": {
            "Ref": "Model"
          }
        },
        "RequestParameters": {
          "method.request.header.Authorization": true
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "PostTasqsLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::ImportValue": "tasq-detect-state-change-dev:PostNewTasqSyncSource"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "RestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "PostTasqs": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "PostTasqsLambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RestApiAuthorizer"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "TasqsResource"
        },
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::ImportValue": "tasq-detect-state-change-dev:PostNewTasqSyncSource"
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"node_id\": $input.json('$.node_id'),\"assign_to_user\": $input.json('$.assign_to_user') ,\"type\": $input.json('$.type'),\"body\" : $input.json('$') }"
          }
        },
        "RequestModels": {
          "application/json": {
            "Ref": "Model"
          }
        },
        "RequestParameters": {
          "method.request.header.Authorization": true
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "TasqsTasqResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ParentId": {
          "Ref": "TasqsResource"
        },
        "PathPart": "{tasq_id}"
      }
    },
    "DeleteTasqTasqLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::ImportValue": "tasq-detect-state-change-dev:DeleteTasqSyncSource"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "RestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "DeleteTasqTasqPrediction": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "DeleteTasqTasqLambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RestApiAuthorizer"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "TasqsTasqResource"
        },
        "HttpMethod": "DELETE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::ImportValue": "tasq-detect-state-change-dev:DeleteTasqSyncSource"
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"id\": \"$input.params('tasq_id')\"}"
          }
        },
        "RequestModels": {
          "application/json": {
            "Ref": "Model"
          }
        },
        "RequestParameters": {
          "method.request.header.Authorization": true
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "GetTasqTasqLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::ImportValue": "tasq-detect-state-change-dev:GetPredictionRowSyncSource"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "RestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "GetTasqTasqPrediction": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "GetTasqTasqLambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RestApiAuthorizer"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "TasqsTasqResource"
        },
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::ImportValue": "tasq-detect-state-change-dev:GetPredictionRowSyncSource"
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"id\": \"$input.params('tasq_id')\"}"
          }
        },
        "RequestModels": {
          "application/json": {
            "Ref": "Model"
          }
        },
        "RequestParameters": {
          "method.request.header.Authorization": true
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "PutTasqTasqLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::ImportValue": "tasq-detect-state-change-dev:UpdateTasqSyncSource"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "RestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "PutTasqTasqPrediction": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "PutTasqTasqLambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RestApiAuthorizer"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "TasqsTasqResource"
        },
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::ImportValue": "tasq-detect-state-change-dev:UpdateTasqSyncSource"
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"id\": \"$input.params('tasq_id')\", \"type\": $input.json('$.type') , \"assign_to_user\": $input.json('$.assign_to_user') ,\"node_id\": $input.json('$.node_id'),\"body\" : $input.json('$') }"
          }
        },
        "RequestModels": {
          "application/json": {
            "Ref": "Model"
          }
        },
        "RequestParameters": {
          "method.request.header.Authorization": true
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "TicketResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "RestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "tickets"
      }
    },
    "PostTicketsLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::ImportValue": "tasq-analytics-dev:SubmitTicketSyncSource"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "RestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "PostTickets": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "PostTicketsLambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RestApiAuthorizer"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "TicketResource"
        },
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::ImportValue": "tasq-analytics-dev:SubmitTicketSyncSource"
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"username\": $input.json('$.username'), \"description\": $input.json('$.description'), \"ticket_title\": $input.json('$.ticket_title'), \"issue_type\": $input.json('$.issue_type'), \"page\": $input.json('$.page'), \"operator\": $input.json('$.operator'), \"body\" : $input.json('$') }"
          }
        },
        "RequestModels": {
          "application/json": {
            "Ref": "Model"
          }
        },
        "RequestParameters": {
          "method.request.header.Authorization": true
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "GetTicketsLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::ImportValue": "tasq-analytics-dev:GetTrackedTicketsSyncSource"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "RestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "GetTickets": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "GetTicketsLambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RestApiAuthorizer"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "TicketResource"
        },
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::ImportValue": "tasq-analytics-dev:GetTrackedTicketsSyncSource"
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"id\": \"$input.params('ticket_id')\"}"
          }
        },
        "RequestModels": {
          "application/json": {
            "Ref": "Model"
          }
        },
        "RequestParameters": {
          "method.request.header.Authorization": true
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "TicketIDResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ParentId": {
          "Ref": "TicketResource"
        },
        "PathPart": "{ticket_id}"
      }
    },
    "DeleteTicketLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::ImportValue": "tasq-analytics-dev:DeleteTicketSyncSource"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "RestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "DeleteTicket": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "DeleteTicketLambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RestApiAuthorizer"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "TicketIDResource"
        },
        "HttpMethod": "DELETE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::ImportValue": "tasq-analytics-dev:DeleteTicketSyncSource"
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"id\": \"$input.params('ticket_id')\"}"
          }
        },
        "RequestModels": {
          "application/json": {
            "Ref": "Model"
          }
        },
        "RequestParameters": {
          "method.request.header.Authorization": true
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "GetTicketLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::ImportValue": "tasq-analytics-dev:GetTicketSyncSource"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "RestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "GetTicket": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "GetTicketLambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RestApiAuthorizer"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "TicketIDResource"
        },
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::ImportValue": "tasq-analytics-dev:GetTicketSyncSource"
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"id\": \"$input.params('ticket_id')\"}"
          }
        },
        "RequestModels": {
          "application/json": {
            "Ref": "Model"
          }
        },
        "RequestParameters": {
          "method.request.header.Authorization": true
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "ProfileResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "RestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "users"
      }
    },
    "GetProfilesLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::ImportValue": "tasq-assign-user-tasks-dev:GetAllUsersSyncSource"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "RestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "GetProfiles": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "GetProfilesLambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RestApiAuthorizer"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "ProfileResource"
        },
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::ImportValue": "tasq-assign-user-tasks-dev:GetAllUsersSyncSource"
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ]
        },
        "RequestModels": {
          "application/json": {
            "Ref": "Model"
          }
        },
        "RequestParameters": {
          "method.request.header.Authorization": true
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "PostProfileLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::ImportValue": "tasq-assign-user-tasks-dev:UserSignUpSyncSource"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "RestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "PostProfile": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "PostProfileLambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RestApiAuthorizer"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "ProfileResource"
        },
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::ImportValue": "tasq-assign-user-tasks-dev:UserSignUpSyncSource"
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"first_name\": $input.json('$.first_name') ,\"last_name\": $input.json('$.last_name') ,\"user_email\": $input.json('$.email') ,\"phone_number\": $input.json('$.phone_number') ,\"roles\": $input.json('$.roles') ,\"phone_number\": $input.json('$.phone_number') ,\"accepting_tasqs\": $input.json('$.accepting_tasqs'),\"body\" : $input.json('$') }"
          }
        },
        "RequestModels": {
          "application/json": {
            "Ref": "Model"
          }
        },
        "RequestParameters": {
          "method.request.header.Authorization": true
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "ProfileUserResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ParentId": {
          "Ref": "ProfileResource"
        },
        "PathPart": "{user}"
      }
    },
    "GetProfileUserLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::ImportValue": "tasq-assign-user-tasks-dev:GetUserDetailsSyncSource"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "RestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "GetProfileUser": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "GetProfileUserLambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RestApiAuthorizer"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "ProfileUserResource"
        },
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::ImportValue": "tasq-assign-user-tasks-dev:GetUserDetailsSyncSource"
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"username\": \"$input.params('user')\"}"
          }
        },
        "RequestModels": {
          "application/json": {
            "Ref": "Model"
          }
        },
        "RequestParameters": {
          "method.request.header.Authorization": true
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "PutProfileUserLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::ImportValue": "tasq-assign-user-tasks-dev:UpdateProfileSyncSource"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "RestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "PutProfileUser": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "PutProfileUserLambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RestApiAuthorizer"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "ProfileUserResource"
        },
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::ImportValue": "tasq-assign-user-tasks-dev:UpdateProfileSyncSource"
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"username\": \"$input.params('user')\",\"first_name\": $input.json('$.first_name'),\"last_name\": $input.json('$.last_name'),\"team\": $input.json('$.team') ,\"roles\": $input.json('$.roles') ,\"email\": $input.json('$.email') ,\"phone_number\": $input.json('$.phone_number') ,\"accepting_tasqs\": $input.json('$.accepting_tasqs'),\"body\" : $input.json('$') }"
          }
        },
        "RequestModels": {
          "application/json": {
            "Ref": "Model"
          }
        },
        "RequestParameters": {
          "method.request.header.Authorization": true
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "WorkflowResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "RestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "workflows"
      }
    },
    "PostWorkflowLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::ImportValue": "tasq-raw-scada-ingest-enerplus-dev:ClientDataIngest"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "RestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "PostWorkflow": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "PostWorkflowLambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RestApiAuthorizer"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "WorkflowResource"
        },
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::ImportValue": "tasq-assign-user-tasks-dev:PostWorkflowSyncSource"
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"settings\": \"$input.params('settings')\",\"username\": \"$input.params('username')\"}"
          }
        },
        "RequestModels": {
          "application/json": {
            "Ref": "Model"
          }
        },
        "RequestParameters": {
          "method.request.header.Authorization": true
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "GetWorkflowsLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::ImportValue": "tasq-assign-user-tasks-dev:GetAllWorkflowsSyncSource"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "RestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "GetWorkflows": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "GetWorkflowsLambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RestApiAuthorizer"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "WorkflowResource"
        },
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::ImportValue": "tasq-assign-user-tasks-dev:GetAllWorkflowsSyncSource"
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ]
        },
        "RequestModels": {
          "application/json": {
            "Ref": "Model"
          }
        },
        "RequestParameters": {
          "method.request.header.Authorization": true
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "WorkflowUserResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ParentId": {
          "Ref": "WorkflowResource"
        },
        "PathPart": "{workflow_id}"
      }
    },
    "PutWorkflowLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::ImportValue": "tasq-assign-user-tasks-dev:UpdateWorkflowSyncSource"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "RestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "PutWorkflow": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "PutWorkflowLambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RestApiAuthorizer"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "WorkflowUserResource"
        },
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::ImportValue": "tasq-assign-user-tasks-dev:UpdateWorkflowSyncSource"
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"id\": \"$input.params('workflow_id')\",\"settings\": \"$input.params('settings')\",\"username\": \"$input.params('username')\"}"
          }
        },
        "RequestModels": {
          "application/json": {
            "Ref": "Model"
          }
        },
        "RequestParameters": {
          "method.request.header.Authorization": true
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "DeleteWorkflowPredictionLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::ImportValue": "tasq-assign-user-tasks-dev:DeleteWorkflowSyncSource"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "RestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "DeleteWorkflowPrediction": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "DeleteWorkflowPredictionLambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RestApiAuthorizer"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "WorkflowUserResource"
        },
        "HttpMethod": "DELETE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::ImportValue": "tasq-assign-user-tasks-dev:DeleteWorkflowSyncSource"
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"id\": \"$input.params('workflow_id')\"}"
          }
        },
        "RequestModels": {
          "application/json": {
            "Ref": "Model"
          }
        },
        "RequestParameters": {
          "method.request.header.Authorization": true
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "GetWorkflowPredictionLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::ImportValue": "tasq-assign-user-tasks-dev:GetWorkflowSyncSource"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "RestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "GetWorkflowPrediction": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "GetWorkflowPredictionLambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RestApiAuthorizer"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "WorkflowUserResource"
        },
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::ImportValue": "tasq-assign-user-tasks-dev:GetWorkflowSyncSource"
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"id\": \"$input.params('workflow_id')\",\"days\": \"$input.params('days')\"}"
          }
        },
        "RequestModels": {
          "application/json": {
            "Ref": "Model"
          }
        },
        "RequestParameters": {
          "method.request.header.Authorization": true
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "ResponsesResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "RestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "responses"
      }
    },
    "GetResponseLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::ImportValue": "tasq-detect-state-change-dev:GetUserResponsesSyncSource"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "RestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "GetResponse": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "GetResponseLambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RestApiAuthorizer"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "ResponsesResource"
        },
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::ImportValue": "tasq-detect-state-change-dev:GetUserResponsesSyncSource"
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ]
        },
        "RequestModels": {
          "application/json": {
            "Ref": "Model"
          }
        },
        "RequestParameters": {
          "method.request.header.Authorization": true
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "PostUserResponseLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::ImportValue": "tasq-detect-state-change-dev:UpdateUserResponseSyncSource"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "RestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "PostUserResponse": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "PostUserResponseLambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RestApiAuthorizer"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "ResponsesResource"
        },
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::ImportValue": "tasq-detect-state-change-dev:UpdateUserResponseSyncSource"
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"id\": $input.json('$.id'),\"mark_as_complete\": $input.json('$.mark_as_complete') ,\"response_data\": $input.json('$.response_data'),\"body\" : $input.json('$') }"
          }
        },
        "RequestModels": {
          "application/json": {
            "Ref": "Model"
          }
        },
        "RequestParameters": {
          "method.request.header.Authorization": true
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "ResponsesUserResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ParentId": {
          "Ref": "ResponsesResource"
        },
        "PathPart": "{response_id}"
      }
    },
    "PutResponseUserPredictionLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::ImportValue": "tasq-detect-state-change-dev:UpdateUserResponseSyncSource"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "RestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "PutResponseUserPrediction": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "PutResponseUserPredictionLambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RestApiAuthorizer"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "ResponsesUserResource"
        },
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::ImportValue": "tasq-detect-state-change-dev:UpdateUserResponseSyncSource"
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"id\": \"$input.params('response_id')\",\"mark_as_complete\": $input.json('$.mark_as_complete') ,\"response_data\": $input.json('$.response_data'),\"body\" : $input.json('$') }"
          }
        },
        "RequestModels": {
          "application/json": {
            "Ref": "Model"
          }
        },
        "RequestParameters": {
          "method.request.header.Authorization": true
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "DeleteResponseUserPredictionLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::ImportValue": "tasq-detect-state-change-dev:DeleteUserResponseSyncSource"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "RestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "DeleteResponseUserPrediction": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "DeleteResponseUserPredictionLambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RestApiAuthorizer"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "ResponsesUserResource"
        },
        "HttpMethod": "DELETE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::ImportValue": "tasq-detect-state-change-dev:DeleteUserResponseSyncSource"
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"id\": \"$input.params('response_id')\"}"
          }
        },
        "RequestModels": {
          "application/json": {
            "Ref": "Model"
          }
        },
        "RequestParameters": {
          "method.request.header.Authorization": true
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "GetResponseUserPredictionLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::ImportValue": "tasq-detect-state-change-dev:GetUserResponseSyncSource"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "RestApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "GetResponseUserPrediction": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "GetResponseUserPredictionLambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RestApiAuthorizer"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "ResponsesUserResource"
        },
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::ImportValue": "tasq-detect-state-change-dev:GetUserResponseSyncSource"
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"prediction_id\": \"$input.params('response_id')\"}"
          }
        },
        "RequestModels": {
          "application/json": {
            "Ref": "Model"
          }
        },
        "RequestParameters": {
          "method.request.header.Authorization": true
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "IngestResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "RestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "ingest"
      }
    },
    "PostData": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": "PostWorkflowLambdaPermission",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RestApiAuthorizer"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "IngestResource"
        },
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::ImportValue": "tasq-raw-scada-ingest-enerplus-dev:ClientDataIngest"
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": "{\"data\": $input.json('$.data'),\"operator\": $input.json('$.operator') ,\"database_name\": $input.json('$.database_name') ,\"table_name\": $input.json('$.table_name'),\"body\" : $input.json('$') }"
          }
        },
        "RequestModels": {
          "application/json": {
            "Ref": "Model"
          }
        },
        "RequestParameters": {
          "method.request.header.Authorization": true
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "ApiGatewayTokensTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "TokenID",
            "AttributeType": "S"
          },
          {
            "AttributeName": "Username",
            "AttributeType": "S"
          },
          {
            "AttributeName": "AccessToken",
            "AttributeType": "S"
          },
          {
            "AttributeName": "time",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "TokenID",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "time",
            "KeyType": "RANGE"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "User-index",
            "KeySchema": [
              {
                "AttributeName": "Username",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 5,
              "WriteCapacityUnits": 5
            }
          },
          {
            "IndexName": "AccessToken-index",
            "KeySchema": [
              {
                "AttributeName": "AccessToken",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 5,
              "WriteCapacityUnits": 5
            }
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        }
      }
    },
    "AuthTableQueryApi": {
      "Type": "AWS::AppSync::GraphQLApi",
      "Properties": {
        "AuthenticationType": "AMAZON_COGNITO_USER_POOLS",
        "Name": "AuthTableQueryApi-dev",
        "UserPoolConfig": {
          "AwsRegion": "us-east-1",
          "DefaultAction": "ALLOW",
          "UserPoolId": "us-east-1_VwUkzXfIT"
        },
        "LogConfig": {
          "CloudWatchLogsRoleArn": {
            "Fn::GetAtt": [
              "AppSyncPushToCloudwatchRole",
              "Arn"
            ]
          },
          "ExcludeVerboseContent": "false",
          "FieldLogLevel": "ALL"
        }
      }
    },
    "AnalyticsQuerySchema": {
      "Type": "AWS::AppSync::GraphQLSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "AuthTableQueryApi",
            "ApiId"
          ]
        },
        "Definition": "\n\n\ntype Mutation {\n  generate_personal_access_token(input: CreateNewAuthTokenInput): CreateNewAuthTokenOutput\n\t\t@aws_auth(cognito_groups: [\"NormalGroup\",\"AdminGroup\",\"Engineers\",\"Automation\",\"Testing\",\"FieldOperator\",\"Intervention\",\"Maintenance\",\"NormalGroup\",\"Operators\",\"Optimizer\",\"SafetyCritical\"])\n}\n\ninput CreateNewAuthTokenInput {\n  Username: String!\n  TokenName: String!\n}\n\ntype CreateNewAuthTokenOutput {\n  TokenID: String\n  time: String\n  Username: String\n  AccessToken: String\n  TokenName: String\n}\n\n\ntype Query {\n  get_personal_access_token(input: GetAuthTokensInput): GetAuthTokensOutput\n}\n\ninput GetAuthTokensInput {\n  Username: String!\n}\n\ntype GetAuthTokensOutput {\n  TokenData: [AWSJSON]\n}\n\n\nschema {\n\tquery: Query\n    mutation: Mutation\n}\n"
      }
    },
    "GenPersAccTokenSyncSource": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "AuthTableQueryApi",
            "ApiId"
          ]
        },
        "LambdaConfig": {
          "LambdaFunctionArn": {
            "Fn::GetAtt": [
              "GenPersAccTokenSyncSourceLambdaFunction",
              "Arn"
            ]
          }
        },
        "Name": "generate_personal_access_token",
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "AppSyncLambdaServiceRole",
            "Arn"
          ]
        },
        "Type": "AWS_LAMBDA"
      }
    },
    "GenPersAccTokenAppSyncQueryResolver1": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "AnalyticsQuerySchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "AuthTableQueryApi",
            "ApiId"
          ]
        },
        "DataSourceName": {
          "Fn::GetAtt": [
            "GenPersAccTokenSyncSource",
            "Name"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "generate_personal_access_token",
        "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"Invoke\",\n    \"payload\": $utils.toJson($context.arguments)\n}\n",
        "ResponseMappingTemplate": "$utils.toJson($context.result)\n"
      }
    },
    "GetPersAccTokenSyncSource": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "AuthTableQueryApi",
            "ApiId"
          ]
        },
        "LambdaConfig": {
          "LambdaFunctionArn": {
            "Fn::GetAtt": [
              "GetPersAccTokenSyncSourceLambdaFunction",
              "Arn"
            ]
          }
        },
        "Name": "get_personal_access_token",
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "AppSyncLambdaServiceRole",
            "Arn"
          ]
        },
        "Type": "AWS_LAMBDA"
      }
    },
    "GetPersAccTokenAppSyncQueryResolver1": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "AnalyticsQuerySchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "AuthTableQueryApi",
            "ApiId"
          ]
        },
        "DataSourceName": {
          "Fn::GetAtt": [
            "GetPersAccTokenSyncSource",
            "Name"
          ]
        },
        "TypeName": "Query",
        "FieldName": "get_personal_access_token",
        "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"Invoke\",\n    \"payload\": $utils.toJson($context.arguments)\n}\n",
        "ResponseMappingTemplate": "$utils.toJson($context.result)\n"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-bucket-main"
    },
    "ApiGatewayTokensTable": {
      "Description": "DynamoDB table for predictions jobs",
      "Value": {
        "Ref": "ApiGatewayTokensTable"
      },
      "Export": {
        "Name": {
          "Fn::Join": [
            ":",
            [
              {
                "Ref": "AWS::StackName"
              },
              "ApiGatewayTokensTable"
            ]
          ]
        }
      }
    }
  },
  "Parameters": {
    "Ec2ContainerService": {
      "Type": "String",
      "Default": "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
    },
    "ECSTaskExecutionRole": {
      "Type": "String",
      "Default": "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
    },
    "CloudWatchLogsPolicy": {
      "Type": "String",
      "Default": "arn:aws:iam::711589413744:policy/ECS-CloudWatchLogs"
    },
    "AmazonDynamoDBFullAccess": {
      "Type": "String",
      "Default": "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
    },
    "AppSyncTutorialAmazonDynamoDBPolicy": {
      "Type": "String",
      "Default": "arn:aws:iam::711589413744:policy/deepdish/TestAppsyncDynamoDB-AppSyncTutorialAmazonDynamoDBPolicy-TSRDEN6AVMDO"
    }
  }
}