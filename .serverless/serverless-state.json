{
  "service": {
    "service": "tasq-api",
    "serviceObject": {
      "name": "tasq-api"
    },
    "provider": {
      "stage": "prod",
      "variableSyntax": "\\${{([ ~:a-zA-Z0-9._@\\'\",\\-\\/\\(\\)]+?)}}",
      "name": "aws",
      "stackName": "tasq-api-prod",
      "deploymentBucket": "serverless-bucket-main",
      "runtime": "python3.7",
      "region": "us-east-2",
      "containerTag": "latest",
      "versionFunctions": false,
      "logRetentionInDays": 14,
      "stackTags": {
        "Environment": "prod",
        "VersionTag": "v1-36-g7ad6f57"
      },
      "tags": {
        "Environment": "prod",
        "VersionTag": "v1-36-g7ad6f57"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "*"
          ],
          "Resource": "*"
        }
      ],
      "environment": {
        "CentralLoggerStackName": "tasq-central-logger-prod",
        "IamNetworkStackName": "tasq-aws-iam-networking-prod",
        "MetaDataStoreStackName": "tasq-meta-datastore-prod",
        "WellStateS3BucketName": "tasq-well-state-worker-prod",
        "PredictionsTableStackName": "tasq-detect-state-change-prod",
        "FailureTableStackName": "tasq-failure-prediction-prod",
        "RawScadaIngestStackName": "tasq-raw-scada-ingest-enerplus-prod",
        "CleanScadaIngestStackName": "tasq-clean-scada-ingest-enerplus-prod",
        "StackMainUserId": "711589413744",
        "EcrAddress": "711589413744.dkr.ecr.us-east-2.amazonaws.com",
        "InboundStackName": "tasq-feature-extract-prod",
        "LambdaLayerStack": "tasq-lambda-layers-prod",
        "DetectStateChangeStackName": "tasq-detect-state-change-prod",
        "TasqAnalyticsStackName": "tasq-analytics-prod",
        "AssignUserTasqStackName": "tasq-assign-user-tasks-prod"
      },
      "deploymentBucketObject": {
        "name": "serverless-bucket-main",
        "serverSideEncryption": "AES256"
      },
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "AuthAppSyncSourceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tasq-api-prod-AuthAppSyncSource",
              "RetentionInDays": 14
            }
          },
          "GenPersAccTokenSyncSourceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tasq-api-prod-GenPersAccTokenSyncSource",
              "RetentionInDays": 14
            }
          },
          "GetPersAccTokenSyncSourceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tasq-api-prod-GetPersAccTokenSyncSource",
              "RetentionInDays": 14
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "tasq-api",
                        "prod",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tasq-api-prod*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tasq-api-prod*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "tasq-api",
                    "prod",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                    ]
                  ]
                }
              ]
            }
          },
          "AuthAppSyncSourceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-bucket-main",
                "S3Key": "tasq-api/serverless/tasq-api/prod/1594746356895-2020-07-14T17:05:56.895Z/tasq-api.zip"
              },
              "FunctionName": "tasq-api-prod-AuthAppSyncSource",
              "Handler": "src/functions/appsync_resolver/appsync_sources.authorize_api_user",
              "MemorySize": 256,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "python3.7",
              "Timeout": 30,
              "Description": "Lambda data-source for appsync endpoint: Authorize api user",
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "prod"
                },
                {
                  "Key": "VersionTag",
                  "Value": "v1-36-g7ad6f57"
                }
              ],
              "Environment": {
                "Variables": {
                  "CentralLoggerStackName": "tasq-central-logger-prod",
                  "IamNetworkStackName": "tasq-aws-iam-networking-prod",
                  "MetaDataStoreStackName": "tasq-meta-datastore-prod",
                  "WellStateS3BucketName": "tasq-well-state-worker-prod",
                  "PredictionsTableStackName": "tasq-detect-state-change-prod",
                  "FailureTableStackName": "tasq-failure-prediction-prod",
                  "RawScadaIngestStackName": "tasq-raw-scada-ingest-enerplus-prod",
                  "CleanScadaIngestStackName": "tasq-clean-scada-ingest-enerplus-prod",
                  "StackMainUserId": "711589413744",
                  "EcrAddress": "711589413744.dkr.ecr.us-east-2.amazonaws.com",
                  "InboundStackName": "tasq-feature-extract-prod",
                  "LambdaLayerStack": "tasq-lambda-layers-prod",
                  "DetectStateChangeStackName": "tasq-detect-state-change-prod",
                  "TasqAnalyticsStackName": "tasq-analytics-prod",
                  "AssignUserTasqStackName": "tasq-assign-user-tasks-prod",
                  "API_GATEWAY_TOKENS_TABLE": {
                    "Ref": "ApiGatewayTokensTable"
                  }
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  {
                    "Fn::ImportValue": "tasq-aws-iam-networking-prod:EcsContainerSecurityGroup"
                  }
                ],
                "SubnetIds": [
                  {
                    "Fn::ImportValue": "tasq-aws-iam-networking-prod:MainSubnet1"
                  },
                  {
                    "Fn::ImportValue": "tasq-aws-iam-networking-prod:MainSubnet2"
                  }
                ]
              },
              "Layers": [
                {
                  "Fn::ImportValue": "tasq-lambda-layers-prod:TasqloggingLambdaLayer"
                }
              ]
            },
            "DependsOn": [
              "AuthAppSyncSourceLogGroup"
            ]
          },
          "GenPersAccTokenSyncSourceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-bucket-main",
                "S3Key": "tasq-api/serverless/tasq-api/prod/1594746356895-2020-07-14T17:05:56.895Z/tasq-api.zip"
              },
              "FunctionName": "tasq-api-prod-GenPersAccTokenSyncSource",
              "Handler": "src/functions/appsync_resolver/appsync_sources.create_new_auth_token",
              "MemorySize": 192,
              "Role": {
                "Fn::GetAtt": [
                  "AppSyncSourceLambdaRole",
                  "Arn"
                ]
              },
              "Runtime": "python3.7",
              "Timeout": 30,
              "Description": "Lambda data-source for appsync endpoint: Generate a personal access token",
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "prod"
                },
                {
                  "Key": "VersionTag",
                  "Value": "v1-36-g7ad6f57"
                }
              ],
              "Environment": {
                "Variables": {
                  "CentralLoggerStackName": "tasq-central-logger-prod",
                  "IamNetworkStackName": "tasq-aws-iam-networking-prod",
                  "MetaDataStoreStackName": "tasq-meta-datastore-prod",
                  "WellStateS3BucketName": "tasq-well-state-worker-prod",
                  "PredictionsTableStackName": "tasq-detect-state-change-prod",
                  "FailureTableStackName": "tasq-failure-prediction-prod",
                  "RawScadaIngestStackName": "tasq-raw-scada-ingest-enerplus-prod",
                  "CleanScadaIngestStackName": "tasq-clean-scada-ingest-enerplus-prod",
                  "StackMainUserId": "711589413744",
                  "EcrAddress": "711589413744.dkr.ecr.us-east-2.amazonaws.com",
                  "InboundStackName": "tasq-feature-extract-prod",
                  "LambdaLayerStack": "tasq-lambda-layers-prod",
                  "DetectStateChangeStackName": "tasq-detect-state-change-prod",
                  "TasqAnalyticsStackName": "tasq-analytics-prod",
                  "AssignUserTasqStackName": "tasq-assign-user-tasks-prod",
                  "API_GATEWAY_TOKENS_TABLE": {
                    "Ref": "ApiGatewayTokensTable"
                  }
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  {
                    "Fn::ImportValue": "tasq-aws-iam-networking-prod:EcsContainerSecurityGroup"
                  }
                ],
                "SubnetIds": [
                  {
                    "Fn::ImportValue": "tasq-aws-iam-networking-prod:MainSubnet1"
                  },
                  {
                    "Fn::ImportValue": "tasq-aws-iam-networking-prod:MainSubnet2"
                  }
                ]
              }
            },
            "DependsOn": [
              "GenPersAccTokenSyncSourceLogGroup",
              "AppSyncSourceLambdaRole"
            ]
          },
          "GetPersAccTokenSyncSourceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-bucket-main",
                "S3Key": "tasq-api/serverless/tasq-api/prod/1594746356895-2020-07-14T17:05:56.895Z/tasq-api.zip"
              },
              "FunctionName": "tasq-api-prod-GetPersAccTokenSyncSource",
              "Handler": "src/functions/appsync_resolver/appsync_sources.get_auth_token",
              "MemorySize": 192,
              "Role": {
                "Fn::GetAtt": [
                  "AppSyncSourceLambdaRole",
                  "Arn"
                ]
              },
              "Runtime": "python3.7",
              "Timeout": 30,
              "Description": "Lambda data-source for appsync endpoint: Get personal access token",
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "prod"
                },
                {
                  "Key": "VersionTag",
                  "Value": "v1-36-g7ad6f57"
                }
              ],
              "Environment": {
                "Variables": {
                  "CentralLoggerStackName": "tasq-central-logger-prod",
                  "IamNetworkStackName": "tasq-aws-iam-networking-prod",
                  "MetaDataStoreStackName": "tasq-meta-datastore-prod",
                  "WellStateS3BucketName": "tasq-well-state-worker-prod",
                  "PredictionsTableStackName": "tasq-detect-state-change-prod",
                  "FailureTableStackName": "tasq-failure-prediction-prod",
                  "RawScadaIngestStackName": "tasq-raw-scada-ingest-enerplus-prod",
                  "CleanScadaIngestStackName": "tasq-clean-scada-ingest-enerplus-prod",
                  "StackMainUserId": "711589413744",
                  "EcrAddress": "711589413744.dkr.ecr.us-east-2.amazonaws.com",
                  "InboundStackName": "tasq-feature-extract-prod",
                  "LambdaLayerStack": "tasq-lambda-layers-prod",
                  "DetectStateChangeStackName": "tasq-detect-state-change-prod",
                  "TasqAnalyticsStackName": "tasq-analytics-prod",
                  "AssignUserTasqStackName": "tasq-assign-user-tasks-prod",
                  "API_GATEWAY_TOKENS_TABLE": {
                    "Ref": "ApiGatewayTokensTable"
                  }
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  {
                    "Fn::ImportValue": "tasq-aws-iam-networking-prod:EcsContainerSecurityGroup"
                  }
                ],
                "SubnetIds": [
                  {
                    "Fn::ImportValue": "tasq-aws-iam-networking-prod:MainSubnet1"
                  },
                  {
                    "Fn::ImportValue": "tasq-aws-iam-networking-prod:MainSubnet2"
                  }
                ]
              }
            },
            "DependsOn": [
              "GetPersAccTokenSyncSourceLogGroup",
              "AppSyncSourceLambdaRole"
            ]
          },
          "AppsyncAccessDynamoDB": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "dynamodb.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "ManagedPolicyArns": [
                "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
                "arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole",
                "arn:aws:iam::aws:policy/AWSLambdaInvocation-DynamoDB",
                "arn:aws:iam::aws:policy/SecretsManagerReadWrite",
                "arn:aws:iam::711589413744:policy/FullCognitoIdentityAccess",
                "arn:aws:iam::aws:policy/AmazonCognitoPowerUser"
              ]
            }
          },
          "AppSyncSourceLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "ManagedPolicyArns": [
                "arn:aws:iam::aws:policy/AWSLambdaExecute",
                "arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess",
                "arn:aws:iam::aws:policy/SecretsManagerReadWrite",
                "arn:aws:iam::711589413744:policy/FullCognitoIdentityAccess",
                "arn:aws:iam::aws:policy/AmazonCognitoPowerUser",
                "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
              ],
              "Policies": [
                {
                  "PolicyName": "Lambda-AppSyncSourceSecrets-Policy",
                  "PolicyDocument": {
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "secretsmanager:GetSecretValue",
                          "secretsmanager:ListSecrets",
                          "secretsmanager:ListSecretVersionIds"
                        ],
                        "Resource": [
                          "arn:aws:secretsmanager:us-east-2:711589413744:secret:influx/enerplus/prod/cloud-EENOZI"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "AppSyncLambdaServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "appsync.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "Lambda-AppSyncServiceRole-Policy",
                  "PolicyDocument": {
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "lambda:invokeFunction"
                        ],
                        "Resource": [
                          "*"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "AppSyncPushToCloudwatchRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "appsync.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "ManagedPolicyArns": [
                "arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs",
                "arn:aws:iam::aws:policy/SecretsManagerReadWrite",
                "arn:aws:iam::711589413744:policy/FullCognitoIdentityAccess",
                "arn:aws:iam::aws:policy/AmazonCognitoPowerUser"
              ]
            }
          },
          "RestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "Api"
            }
          },
          "RestApiAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "AuthorizerCredentials": {
                "Fn::GetAtt": [
                  "RestApiAuthorizerRole",
                  "Arn"
                ]
              },
              "AuthorizerResultTtlInSeconds": 300,
              "AuthorizerUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    "arn:aws:lambda:us-east-2:711589413744:function:tasq-api-prod-AuthAppSyncSource",
                    "/invocations"
                  ]
                ]
              },
              "IdentitySource": "method.request.header.Authorization",
              "Name": "api-authorizer",
              "RestApiId": {
                "Ref": "RestApi"
              },
              "Type": "TOKEN"
            }
          },
          "Lambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "ZipFile": "import json\n\ndef lambda_handler(event, context):\n    # TODO implement\n    return {\n        'statusCode': 200,\n        'body': 'Hello from Lambda!!!!!!!!!!!!'\n    }\n"
              },
              "Handler": "index.lambda_handler",
              "MemorySize": 128,
              "Role": {
                "Fn::GetAtt": [
                  "AuthLambdaRole",
                  "Arn"
                ]
              },
              "Runtime": "python3.7",
              "Timeout": 60
            }
          },
          "AuthLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "ManagedPolicyArns": [
                "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ],
              "Policies": [
                {
                  "PolicyName": "dynamodb",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Sid": "1",
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:GetItem"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              "",
                              [
                                "arn:aws:dynamodb:",
                                {
                                  "Ref": "AWS::Region"
                                },
                                ":",
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                ":table/auth-token"
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "RestApiAuthorizerRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "apigateway.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "lambda",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": "lambda:invokeFunction",
                        "Resource": [
                          "arn:aws:lambda:us-east-2:711589413744:function:tasq-api-prod-AuthAppSyncSource"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "Model": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "ContentType": "application/json",
              "Name": "user",
              "RestApiId": {
                "Ref": "RestApi"
              },
              "Schema": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "user",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              }
            }
          },
          "ProfileResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ParentId": {
                "Fn::GetAtt": [
                  "RestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "users"
            }
          },
          "GetProfilesLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Fn::ImportValue": "tasq-assign-user-tasks-prod:GetAllUsersSyncSource"
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "RestApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "GetProfiles": {
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": "GetProfilesLambdaPermission",
            "Properties": {
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "RestApiAuthorizer"
              },
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "ProfileResource"
              },
              "HttpMethod": "GET",
              "Integration": {
                "Type": "AWS",
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::ImportValue": "tasq-assign-user-tasks-prod:GetAllUsersSyncSource"
                      },
                      "/invocations"
                    ]
                  ]
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ]
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "Model"
                }
              },
              "RequestParameters": {
                "method.request.header.Authorization": true
              },
              "MethodResponses": [
                {
                  "ResponseModels": {
                    "application/json": "Empty"
                  },
                  "StatusCode": 200
                }
              ]
            }
          },
          "PostProfileLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Fn::ImportValue": "tasq-assign-user-tasks-prod:UserSignUpSyncSource"
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "RestApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "PostProfile": {
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": "PostProfileLambdaPermission",
            "Properties": {
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "RestApiAuthorizer"
              },
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "ProfileResource"
              },
              "HttpMethod": "POST",
              "Integration": {
                "Type": "AWS",
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::ImportValue": "tasq-assign-user-tasks-prod:UserSignUpSyncSource"
                      },
                      "/invocations"
                    ]
                  ]
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ],
                "RequestTemplates": {
                  "application/json": "{\"UserEmail\": \"$input.params('email')\",\"PhoneNumber\": \"$input.params('phone_number')\",\"Roles\": \"$input.params('roles')\"}"
                }
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "Model"
                }
              },
              "RequestParameters": {
                "method.request.header.Authorization": true
              },
              "MethodResponses": [
                {
                  "ResponseModels": {
                    "application/json": "Empty"
                  },
                  "StatusCode": 200
                }
              ]
            }
          },
          "ProfileUserResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ParentId": {
                "Ref": "ProfileResource"
              },
              "PathPart": "{user}"
            }
          },
          "GetProfileUserLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Fn::ImportValue": "tasq-assign-user-tasks-prod:GetUserDetailsSyncSource"
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "RestApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "GetProfileUser": {
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": "GetProfileUserLambdaPermission",
            "Properties": {
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "RestApiAuthorizer"
              },
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "ProfileUserResource"
              },
              "HttpMethod": "GET",
              "Integration": {
                "Type": "AWS",
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::ImportValue": "tasq-assign-user-tasks-prod:GetUserDetailsSyncSource"
                      },
                      "/invocations"
                    ]
                  ]
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ],
                "RequestTemplates": {
                  "application/json": "{\"username\": \"$input.params('username')\"}"
                }
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "Model"
                }
              },
              "RequestParameters": {
                "method.request.header.Authorization": true
              },
              "MethodResponses": [
                {
                  "ResponseModels": {
                    "application/json": "Empty"
                  },
                  "StatusCode": 200
                }
              ]
            }
          },
          "PutProfileUserLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Fn::ImportValue": "tasq-assign-user-tasks-prod:UpdateProfileSyncSource"
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "RestApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "PutProfileUser": {
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": "PutProfileUserLambdaPermission",
            "Properties": {
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "RestApiAuthorizer"
              },
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "ProfileUserResource"
              },
              "HttpMethod": "PUT",
              "Integration": {
                "Type": "AWS",
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::ImportValue": "tasq-assign-user-tasks-prod:UpdateProfileSyncSource"
                      },
                      "/invocations"
                    ]
                  ]
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ],
                "RequestTemplates": {
                  "application/json": "{\"Username\": \"$input.params('username')\",\"Team\": \"$input.params('teams')\",\"Roles\": \"$input.params('roles')\",\"UserEmail\": \"$input.params('email')\",\"PhoneNumber\": \"$input.params('phone_number')\",\"AcceptingTasqs\": \"$input.params('accepting_tasqs')\"}"
                }
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "Model"
                }
              },
              "RequestParameters": {
                "method.request.header.Authorization": true
              },
              "MethodResponses": [
                {
                  "ResponseModels": {
                    "application/json": "Empty"
                  },
                  "StatusCode": 200
                }
              ]
            }
          },
          "ResponsesResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ParentId": {
                "Fn::GetAtt": [
                  "RestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "responses"
            }
          },
          "GetResponseLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Fn::ImportValue": "tasq-detect-state-change-prod:GetUserResponsesSyncSource"
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "RestApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "GetResponse": {
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": "GetResponseLambdaPermission",
            "Properties": {
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "RestApiAuthorizer"
              },
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "ResponsesResource"
              },
              "HttpMethod": "GET",
              "Integration": {
                "Type": "AWS",
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::ImportValue": "tasq-detect-state-change-prod:GetUserResponsesSyncSource"
                      },
                      "/invocations"
                    ]
                  ]
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ]
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "Model"
                }
              },
              "RequestParameters": {
                "method.request.header.Authorization": true
              },
              "MethodResponses": [
                {
                  "ResponseModels": {
                    "application/json": "Empty"
                  },
                  "StatusCode": 200
                }
              ]
            }
          },
          "ResponsesUserResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ParentId": {
                "Ref": "ResponsesResource"
              },
              "PathPart": "{response_id}"
            }
          },
          "PostUserResponseLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Fn::ImportValue": "tasq-detect-state-change-prod:UpdateUserResponseSyncSource"
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "RestApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "PostUserResponse": {
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": "PostUserResponseLambdaPermission",
            "Properties": {
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "RestApiAuthorizer"
              },
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "ResponsesResource"
              },
              "HttpMethod": "POST",
              "Integration": {
                "Type": "AWS",
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::ImportValue": "tasq-detect-state-change-prod:UpdateUserResponseSyncSource"
                      },
                      "/invocations"
                    ]
                  ]
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ],
                "RequestTemplates": {
                  "application/json": "{\"id\": \"$input.params('tasq_id')\",\"PredictionID\": \"$input.params('id')\",\"ResponseData\": \"$input.params('response_data')\",\"MarkAsComplete\": \"$input.params('mark_as_complete')\"}"
                }
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "Model"
                }
              },
              "RequestParameters": {
                "method.request.header.Authorization": true
              },
              "MethodResponses": [
                {
                  "ResponseModels": {
                    "application/json": "Empty"
                  },
                  "StatusCode": 200
                }
              ]
            }
          },
          "PutResponseUserPredictionLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Fn::ImportValue": "tasq-detect-state-change-prod:UpdateUserResponseSyncSource"
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "RestApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "PutResponseUserPrediction": {
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": "PutResponseUserPredictionLambdaPermission",
            "Properties": {
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "RestApiAuthorizer"
              },
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "ResponsesUserResource"
              },
              "HttpMethod": "POST",
              "Integration": {
                "Type": "AWS",
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::ImportValue": "tasq-detect-state-change-prod:UpdateUserResponseSyncSource"
                      },
                      "/invocations"
                    ]
                  ]
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ],
                "RequestTemplates": {
                  "application/json": "{\"id\": \"$input.params('response_id')\",\"mark_as_complete\": $input.json('$.mark_as_complete') ,\"response_data\": $input.json('$.response_data'),\"body\" : $input.json('$') }"
                }
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "Model"
                }
              },
              "RequestParameters": {
                "method.request.header.Authorization": true
              },
              "MethodResponses": [
                {
                  "ResponseModels": {
                    "application/json": "Empty"
                  },
                  "StatusCode": 200
                }
              ]
            }
          },
          "DeleteResponseUserPredictionLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Fn::ImportValue": "tasq-detect-state-change-prod:DeleteUserResponseSyncSource"
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "RestApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "DeleteResponseUserPrediction": {
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": "DeleteResponseUserPredictionLambdaPermission",
            "Properties": {
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "RestApiAuthorizer"
              },
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "ResponsesUserResource"
              },
              "HttpMethod": "DELETE",
              "Integration": {
                "Type": "AWS",
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::ImportValue": "tasq-detect-state-change-prod:DeleteUserResponseSyncSource"
                      },
                      "/invocations"
                    ]
                  ]
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ],
                "RequestTemplates": {
                  "application/json": "{\"PredictionID\": \"$input.params('id')\"}"
                }
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "Model"
                }
              },
              "RequestParameters": {
                "method.request.header.Authorization": true
              },
              "MethodResponses": [
                {
                  "ResponseModels": {
                    "application/json": "Empty"
                  },
                  "StatusCode": 200
                }
              ]
            }
          },
          "GetResponseUserPredictionLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Fn::ImportValue": "tasq-detect-state-change-prod:GetUserResponseSyncSource"
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "RestApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "GetResponseUserPrediction": {
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": "GetResponseUserPredictionLambdaPermission",
            "Properties": {
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "RestApiAuthorizer"
              },
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "ResponsesUserResource"
              },
              "HttpMethod": "GET",
              "Integration": {
                "Type": "AWS",
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::ImportValue": "tasq-detect-state-change-prod:GetUserResponseSyncSource"
                      },
                      "/invocations"
                    ]
                  ]
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ],
                "RequestTemplates": {
                  "application/json": "{\"prediction_id\": \"$input.params('id')\"}"
                }
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "Model"
                }
              },
              "RequestParameters": {
                "method.request.header.Authorization": true
              },
              "MethodResponses": [
                {
                  "ResponseModels": {
                    "application/json": "Empty"
                  },
                  "StatusCode": 200
                }
              ]
            }
          },
          "TasqsResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ParentId": {
                "Fn::GetAtt": [
                  "RestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "tasqs"
            }
          },
          "GetTasqsLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Fn::ImportValue": "tasq-detect-state-change-prod:GetAllTasqsSyncSource"
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "RestApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "GetTasqs": {
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": "GetTasqsLambdaPermission",
            "Properties": {
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "RestApiAuthorizer"
              },
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "TasqsResource"
              },
              "HttpMethod": "GET",
              "Integration": {
                "Type": "AWS",
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::ImportValue": "tasq-detect-state-change-prod:GetAllTasqsSyncSource"
                      },
                      "/invocations"
                    ]
                  ]
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ],
                "RequestTemplates": {
                  "application/json": "{\"team\": \"$input.params('team')\",\"username\": \"$input.params('username')\"}"
                }
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "Model"
                }
              },
              "RequestParameters": {
                "method.request.header.Authorization": true
              },
              "MethodResponses": [
                {
                  "ResponseModels": {
                    "application/json": "Empty"
                  },
                  "StatusCode": 200
                }
              ]
            }
          },
          "PostTasqsLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Fn::ImportValue": "tasq-detect-state-change-prod:PostNewTasqSyncSource"
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "RestApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "PostTasqs": {
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": "PostTasqsLambdaPermission",
            "Properties": {
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "RestApiAuthorizer"
              },
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "TasqsResource"
              },
              "HttpMethod": "POST",
              "Integration": {
                "Type": "AWS",
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::ImportValue": "tasq-detect-state-change-prod:PostNewTasqSyncSource"
                      },
                      "/invocations"
                    ]
                  ]
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ],
                "RequestTemplates": {
                  "application/json": "{\"AssignedToUsername\": \"$input.params('assign_to_user')\",\"NodeID\": \"$input.params('node_id')\",\"PredictionType\": \"$input.params('type')\"}"
                }
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "Model"
                }
              },
              "RequestParameters": {
                "method.request.header.Authorization": true
              },
              "MethodResponses": [
                {
                  "ResponseModels": {
                    "application/json": "Empty"
                  },
                  "StatusCode": 200
                }
              ]
            }
          },
          "TasqsTasqResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ParentId": {
                "Ref": "TasqsResource"
              },
              "PathPart": "{tasq_id}"
            }
          },
          "DeleteTasqTasqLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Fn::ImportValue": "tasq-detect-state-change-prod:DeleteTasqSyncSource"
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "RestApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "DeleteTasqTasqPrediction": {
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": "DeleteTasqTasqLambdaPermission",
            "Properties": {
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "RestApiAuthorizer"
              },
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "TasqsTasqResource"
              },
              "HttpMethod": "DELETE",
              "Integration": {
                "Type": "AWS",
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::ImportValue": "tasq-detect-state-change-prod:DeleteTasqSyncSource"
                      },
                      "/invocations"
                    ]
                  ]
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ],
                "RequestTemplates": {
                  "application/json": "{\"PredictionID\": \"$input.params('id')\"}"
                }
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "Model"
                }
              },
              "RequestParameters": {
                "method.request.header.Authorization": true
              },
              "MethodResponses": [
                {
                  "ResponseModels": {
                    "application/json": "Empty"
                  },
                  "StatusCode": 200
                }
              ]
            }
          },
          "GetTasqTasqLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Fn::ImportValue": "tasq-detect-state-change-prod:GetPredictionRowSyncSource"
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "RestApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "GetTasqTasqPrediction": {
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": "GetTasqTasqLambdaPermission",
            "Properties": {
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "RestApiAuthorizer"
              },
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "TasqsTasqResource"
              },
              "HttpMethod": "GET",
              "Integration": {
                "Type": "AWS",
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::ImportValue": "tasq-detect-state-change-prod:GetPredictionRowSyncSource"
                      },
                      "/invocations"
                    ]
                  ]
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ],
                "RequestTemplates": {
                  "application/json": "{\"PredictionID\": \"$input.params('id')\"}"
                }
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "Model"
                }
              },
              "RequestParameters": {
                "method.request.header.Authorization": true
              },
              "MethodResponses": [
                {
                  "ResponseModels": {
                    "application/json": "Empty"
                  },
                  "StatusCode": 200
                }
              ]
            }
          },
          "PutTasqTasqLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Fn::ImportValue": "tasq-detect-state-change-prod:UpdateTasqSyncSource"
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "RestApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "PutTasqTasqPrediction": {
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": "PutTasqTasqLambdaPermission",
            "Properties": {
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "RestApiAuthorizer"
              },
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "TasqsTasqResource"
              },
              "HttpMethod": "PUT",
              "Integration": {
                "Type": "AWS",
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::ImportValue": "tasq-detect-state-change-prod:UpdateTasqSyncSource"
                      },
                      "/invocations"
                    ]
                  ]
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ],
                "RequestTemplates": {
                  "application/json": "{\"PredictionID\": \"$input.params('id')\"}"
                }
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "Model"
                }
              },
              "RequestParameters": {
                "method.request.header.Authorization": true
              },
              "MethodResponses": [
                {
                  "ResponseModels": {
                    "application/json": "Empty"
                  },
                  "StatusCode": 200
                }
              ]
            }
          },
          "TicketResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ParentId": {
                "Fn::GetAtt": [
                  "RestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "tickets"
            }
          },
          "PostTicketsLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Fn::ImportValue": "tasq-analytics-prod:SubmitTicketSyncSource"
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "RestApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "PostTickets": {
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": "PostTicketsLambdaPermission",
            "Properties": {
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "RestApiAuthorizer"
              },
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "TicketResource"
              },
              "HttpMethod": "POST",
              "Integration": {
                "Type": "AWS",
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::ImportValue": "tasq-analytics-prod:SubmitTicketSyncSource"
                      },
                      "/invocations"
                    ]
                  ]
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ],
                "RequestTemplates": {
                  "application/json": "{\"Username\": \"$input.params('username')\",\"Description\": \"$input.params('description')\",\"TicketTitle\": \"$input.params('ticket_title')\",\"IssueType\": \"$input.params('issue_type')\",\"Page\": \"$input.params('page')\",\"Operator\": \"$input.params('operator')\"}"
                }
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "Model"
                }
              },
              "RequestParameters": {
                "method.request.header.Authorization": true
              },
              "MethodResponses": [
                {
                  "ResponseModels": {
                    "application/json": "Empty"
                  },
                  "StatusCode": 200
                }
              ]
            }
          },
          "GetTicketsLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Fn::ImportValue": "tasq-analytics-prod:GetTrackedTicketsSyncSource"
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "RestApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "GetTickets": {
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": "GetTicketsLambdaPermission",
            "Properties": {
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "RestApiAuthorizer"
              },
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "TicketResource"
              },
              "HttpMethod": "GET",
              "Integration": {
                "Type": "AWS",
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::ImportValue": "tasq-analytics-prod:GetTrackedTicketsSyncSource"
                      },
                      "/invocations"
                    ]
                  ]
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ],
                "RequestTemplates": {
                  "application/json": "{\"IssueType\": \"$input.params('issue_type')\",\"Username\": \"$input.params('username')\"}"
                }
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "Model"
                }
              },
              "RequestParameters": {
                "method.request.header.Authorization": true
              },
              "MethodResponses": [
                {
                  "ResponseModels": {
                    "application/json": "Empty"
                  },
                  "StatusCode": 200
                }
              ]
            }
          },
          "TicketIDResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ParentId": {
                "Ref": "TicketResource"
              },
              "PathPart": "{ticket_id}"
            }
          },
          "DeleteTicketLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Fn::ImportValue": "tasq-analytics-prod:DeleteTicketSyncSource"
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "RestApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "DeleteTicket": {
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": "DeleteTicketLambdaPermission",
            "Properties": {
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "RestApiAuthorizer"
              },
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "TicketIDResource"
              },
              "HttpMethod": "DELETE",
              "Integration": {
                "Type": "AWS",
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::ImportValue": "tasq-analytics-prod:DeleteTicketSyncSource"
                      },
                      "/invocations"
                    ]
                  ]
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ],
                "RequestTemplates": {
                  "application/json": "{\"TicketId\": \"$input.params('id')\"}"
                }
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "Model"
                }
              },
              "RequestParameters": {
                "method.request.header.Authorization": true
              },
              "MethodResponses": [
                {
                  "ResponseModels": {
                    "application/json": "Empty"
                  },
                  "StatusCode": 200
                }
              ]
            }
          },
          "GetTicketLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Fn::ImportValue": "tasq-analytics-prod:GetTicketSyncSource"
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "RestApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "GetTicket": {
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": "GetTicketLambdaPermission",
            "Properties": {
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "RestApiAuthorizer"
              },
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "TicketIDResource"
              },
              "HttpMethod": "GET",
              "Integration": {
                "Type": "AWS",
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::ImportValue": "tasq-analytics-prod:GetTicketSyncSource"
                      },
                      "/invocations"
                    ]
                  ]
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ],
                "RequestTemplates": {
                  "application/json": "{\"TicketId\": \"$input.params('id')\"}"
                }
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "Model"
                }
              },
              "RequestParameters": {
                "method.request.header.Authorization": true
              },
              "MethodResponses": [
                {
                  "ResponseModels": {
                    "application/json": "Empty"
                  },
                  "StatusCode": 200
                }
              ]
            }
          },
          "WorkflowResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ParentId": {
                "Fn::GetAtt": [
                  "RestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "workflows"
            }
          },
          "PostWorkflowLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Fn::ImportValue": "tasq-assign-user-tasks-prod:PostWorkflowSyncSource"
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "RestApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "PostWorkflow": {
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": "PostWorkflowLambdaPermission",
            "Properties": {
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "RestApiAuthorizer"
              },
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "WorkflowResource"
              },
              "HttpMethod": "POST",
              "Integration": {
                "Type": "AWS",
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::ImportValue": "tasq-assign-user-tasks-prod:PostWorkflowSyncSource"
                      },
                      "/invocations"
                    ]
                  ]
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ],
                "RequestTemplates": {
                  "application/json": "{\"WorkflowDetailsID\": \"$input.params('id')\",\"Username\": \"$input.params('username')\"}"
                }
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "Model"
                }
              },
              "RequestParameters": {
                "method.request.header.Authorization": true
              },
              "MethodResponses": [
                {
                  "ResponseModels": {
                    "application/json": "Empty"
                  },
                  "StatusCode": 200
                }
              ]
            }
          },
          "LambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Fn::GetAtt": [
                  "Lambda",
                  "Arn"
                ]
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "RestApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "GetWorkflowsLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Fn::ImportValue": "tasq-assign-user-tasks-prod:GetAllWorkflowsSyncSource"
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "RestApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "GetWorkflows": {
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": "GetWorkflowsLambdaPermission",
            "Properties": {
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "RestApiAuthorizer"
              },
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "WorkflowResource"
              },
              "HttpMethod": "GET",
              "Integration": {
                "Type": "AWS",
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::ImportValue": "tasq-assign-user-tasks-prod:GetAllWorkflowsSyncSource"
                      },
                      "/invocations"
                    ]
                  ]
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ]
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "Model"
                }
              },
              "RequestParameters": {
                "method.request.header.Authorization": true
              },
              "MethodResponses": [
                {
                  "ResponseModels": {
                    "application/json": "Empty"
                  },
                  "StatusCode": 200
                }
              ]
            }
          },
          "WorkflowUserResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ParentId": {
                "Ref": "WorkflowResource"
              },
              "PathPart": "{workflow_id}"
            }
          },
          "PutWorkflowLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Fn::ImportValue": "tasq-assign-user-tasks-prod:UpdateWorkflowSyncSource"
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "RestApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "PutWorkflow": {
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": "PutWorkflowLambdaPermission",
            "Properties": {
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "RestApiAuthorizer"
              },
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "WorkflowUserResource"
              },
              "HttpMethod": "PUT",
              "Integration": {
                "Type": "AWS",
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::ImportValue": "tasq-assign-user-tasks-prod:UpdateWorkflowSyncSource"
                      },
                      "/invocations"
                    ]
                  ]
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ],
                "RequestTemplates": {
                  "application/json": "{\"WorkflowDetailsID\": \"$input.params('id')\",\"Settings\": \"$input.params('settings')\",\"Username\": \"$input.params('username')\"}"
                }
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "Model"
                }
              },
              "RequestParameters": {
                "method.request.header.Authorization": true
              },
              "MethodResponses": [
                {
                  "ResponseModels": {
                    "application/json": "Empty"
                  },
                  "StatusCode": 200
                }
              ]
            }
          },
          "DeleteWorkflowPredictionLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Fn::ImportValue": "tasq-assign-user-tasks-prod:DeleteWorkflowSyncSource"
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "RestApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "DeleteWorkflowPrediction": {
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": "DeleteWorkflowPredictionLambdaPermission",
            "Properties": {
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "RestApiAuthorizer"
              },
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "WorkflowUserResource"
              },
              "HttpMethod": "DELETE",
              "Integration": {
                "Type": "AWS",
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::ImportValue": "tasq-assign-user-tasks-prod:DeleteWorkflowSyncSource"
                      },
                      "/invocations"
                    ]
                  ]
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ],
                "RequestTemplates": {
                  "application/json": "{\"WorkflowDetailsID\": \"$input.params('id')\"}"
                }
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "Model"
                }
              },
              "RequestParameters": {
                "method.request.header.Authorization": true
              },
              "MethodResponses": [
                {
                  "ResponseModels": {
                    "application/json": "Empty"
                  },
                  "StatusCode": 200
                }
              ]
            }
          },
          "GetWorkflowPredictionLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {
                "Fn::ImportValue": "tasq-assign-user-tasks-prod:GetWorkflowSyncSource"
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "RestApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "GetWorkflowPrediction": {
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": "GetWorkflowPredictionLambdaPermission",
            "Properties": {
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "RestApiAuthorizer"
              },
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "WorkflowUserResource"
              },
              "HttpMethod": "GET",
              "Integration": {
                "Type": "AWS",
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::ImportValue": "tasq-assign-user-tasks-prod:GetWorkflowSyncSource"
                      },
                      "/invocations"
                    ]
                  ]
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ],
                "RequestTemplates": {
                  "application/json": "{\"WorkflowDetailsID\": \"$input.params('id')\",\"AssignmentCountDays\": \"$input.params('days')\"}"
                }
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "Model"
                }
              },
              "RequestParameters": {
                "method.request.header.Authorization": true
              },
              "MethodResponses": [
                {
                  "ResponseModels": {
                    "application/json": "Empty"
                  },
                  "StatusCode": 200
                }
              ]
            }
          },
          "StageV1Deployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "DependsOn": "ProfileResource",
            "Properties": {
              "RestApiId": {
                "Ref": "RestApi"
              }
            }
          },
          "StageV1": {
            "Type": "AWS::ApiGateway::Stage",
            "DependsOn": "StageV1Deployment",
            "Properties": {
              "StageName": "v1",
              "Description": "API Version 1",
              "DeploymentId": {
                "Ref": "StageV1Deployment"
              },
              "RestApiId": {
                "Ref": "RestApi"
              }
            }
          },
          "ApiGatewayTokensTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "TokenID",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "Username",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "AccessToken",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "time",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "TokenID",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "time",
                  "KeyType": "RANGE"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "User-index",
                  "KeySchema": [
                    {
                      "AttributeName": "Username",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                  }
                },
                {
                  "IndexName": "AccessToken-index",
                  "KeySchema": [
                    {
                      "AttributeName": "AccessToken",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                  }
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 5,
                "WriteCapacityUnits": 5
              }
            }
          },
          "AuthTableQueryApi": {
            "Type": "AWS::AppSync::GraphQLApi",
            "Properties": {
              "AuthenticationType": "AMAZON_COGNITO_USER_POOLS",
              "Name": "AuthTableQueryApi-prod",
              "UserPoolConfig": {
                "AwsRegion": "us-east-1",
                "DefaultAction": "ALLOW",
                "UserPoolId": "us-east-1_VwUkzXfIT"
              },
              "LogConfig": {
                "CloudWatchLogsRoleArn": {
                  "Fn::GetAtt": [
                    "AppSyncPushToCloudwatchRole",
                    "Arn"
                  ]
                },
                "ExcludeVerboseContent": "false",
                "FieldLogLevel": "ALL"
              }
            }
          },
          "AnalyticsQuerySchema": {
            "Type": "AWS::AppSync::GraphQLSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "AuthTableQueryApi",
                  "ApiId"
                ]
              },
              "Definition": "\n\n\ntype Mutation {\n  generate_personal_access_token(input: CreateNewAuthTokenInput): CreateNewAuthTokenOutput\n\t\t@aws_auth(cognito_groups: [\"NormalGroup\",\"AdminGroup\",\"Engineers\",\"Automation\",\"Testing\",\"FieldOperator\",\"Intervention\",\"Maintenance\",\"NormalGroup\",\"Operators\",\"Optimizer\",\"SafetyCritical\"])\n}\n\ninput CreateNewAuthTokenInput {\n  Username: String!\n  TokenName: String!\n}\n\ntype CreateNewAuthTokenOutput {\n  TokenID: String\n  time: String\n  Username: String\n  AccessToken: String\n  TokenName: String\n}\n\n\ntype Query {\n  get_personal_access_token(input: GetAuthTokensInput): GetAuthTokensOutput\n}\n\ninput GetAuthTokensInput {\n  Username: String!\n}\n\ntype GetAuthTokensOutput {\n  TokenData: [AWSJSON]\n}\n\n\nschema {\n\tquery: Query\n    mutation: Mutation\n}\n"
            }
          },
          "GenPersAccTokenSyncSource": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "AuthTableQueryApi",
                  "ApiId"
                ]
              },
              "LambdaConfig": {
                "LambdaFunctionArn": {
                  "Fn::GetAtt": [
                    "GenPersAccTokenSyncSourceLambdaFunction",
                    "Arn"
                  ]
                }
              },
              "Name": "generate_personal_access_token",
              "ServiceRoleArn": {
                "Fn::GetAtt": [
                  "AppSyncLambdaServiceRole",
                  "Arn"
                ]
              },
              "Type": "AWS_LAMBDA"
            }
          },
          "GenPersAccTokenAppSyncQueryResolver1": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "AnalyticsQuerySchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "AuthTableQueryApi",
                  "ApiId"
                ]
              },
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GenPersAccTokenSyncSource",
                  "Name"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "generate_personal_access_token",
              "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"Invoke\",\n    \"payload\": $utils.toJson($context.arguments)\n}\n",
              "ResponseMappingTemplate": "$utils.toJson($context.result)\n"
            }
          },
          "GetPersAccTokenSyncSource": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "AuthTableQueryApi",
                  "ApiId"
                ]
              },
              "LambdaConfig": {
                "LambdaFunctionArn": {
                  "Fn::GetAtt": [
                    "GetPersAccTokenSyncSourceLambdaFunction",
                    "Arn"
                  ]
                }
              },
              "Name": "get_personal_access_token",
              "ServiceRoleArn": {
                "Fn::GetAtt": [
                  "AppSyncLambdaServiceRole",
                  "Arn"
                ]
              },
              "Type": "AWS_LAMBDA"
            }
          },
          "GetPersAccTokenAppSyncQueryResolver1": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "AnalyticsQuerySchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "AuthTableQueryApi",
                  "ApiId"
                ]
              },
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GetPersAccTokenSyncSource",
                  "Name"
                ]
              },
              "TypeName": "Query",
              "FieldName": "get_personal_access_token",
              "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"Invoke\",\n    \"payload\": $utils.toJson($context.arguments)\n}\n",
              "ResponseMappingTemplate": "$utils.toJson($context.result)\n"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-bucket-main"
          },
          "ApiGatewayTokensTable": {
            "Description": "DynamoDB table for predictions jobs",
            "Value": {
              "Ref": "ApiGatewayTokensTable"
            },
            "Export": {
              "Name": {
                "Fn::Join": [
                  ":",
                  [
                    {
                      "Ref": "AWS::StackName"
                    },
                    "ApiGatewayTokensTable"
                  ]
                ]
              }
            }
          }
        },
        "Parameters": {
          "Ec2ContainerService": {
            "Type": "String",
            "Default": "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
          },
          "ECSTaskExecutionRole": {
            "Type": "String",
            "Default": "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
          },
          "CloudWatchLogsPolicy": {
            "Type": "String",
            "Default": "arn:aws:iam::711589413744:policy/ECS-CloudWatchLogs"
          },
          "AmazonDynamoDBFullAccess": {
            "Type": "String",
            "Default": "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
          },
          "AppSyncTutorialAmazonDynamoDBPolicy": {
            "Type": "String",
            "Default": "arn:aws:iam::711589413744:policy/deepdish/TestAppsyncDynamoDB-AppSyncTutorialAmazonDynamoDBPolicy-TSRDEN6AVMDO"
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "artifactDirectoryNamePrefix": "tasq-api",
      "pythonRequirements": {
        "dockerizePip": "non-linux"
      }
    },
    "plugins": [
      "ArtifactDirectoryNamePrefix"
    ],
    "pluginsData": {},
    "functions": {
      "AuthAppSyncSource": {
        "description": "Lambda data-source for appsync endpoint: Authorize api user",
        "handler": "src/functions/appsync_resolver/appsync_sources.authorize_api_user",
        "memorySize": 256,
        "timeout": 30,
        "Role": {
          "Fn::GetAtt": [
            "AuthLambdaRole",
            "Arn"
          ]
        },
        "runtime": "python3.7",
        "package": {
          "include": [
            "src/functions/appsync_resolver/**"
          ]
        },
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthAppSyncSourceLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "environment": {
          "API_GATEWAY_TOKENS_TABLE": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthAppSyncSourceLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"API_GATEWAY_TOKENS_TABLE\"]"
          }
        },
        "vpc": {
          "securityGroupIds": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthAppSyncSourceLambdaFunction\"][\"Properties\"][\"VpcConfig\"][\"SecurityGroupIds\"]"
          },
          "subnetIds": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthAppSyncSourceLambdaFunction\"][\"Properties\"][\"VpcConfig\"][\"SubnetIds\"]"
          }
        },
        "events": [],
        "name": "tasq-api-prod-AuthAppSyncSource",
        "memory": 256
      },
      "GenPersAccTokenSyncSource": {
        "DependsOn": "AppSyncSourceLambdaRole",
        "description": "Lambda data-source for appsync endpoint: Generate a personal access token",
        "handler": "src/functions/appsync_resolver/appsync_sources.create_new_auth_token",
        "memorySize": 192,
        "timeout": 30,
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GenPersAccTokenSyncSourceLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "runtime": "python3.7",
        "environment": {
          "API_GATEWAY_TOKENS_TABLE": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GenPersAccTokenSyncSourceLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"API_GATEWAY_TOKENS_TABLE\"]"
          }
        },
        "vpc": {
          "securityGroupIds": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GenPersAccTokenSyncSourceLambdaFunction\"][\"Properties\"][\"VpcConfig\"][\"SecurityGroupIds\"]"
          },
          "subnetIds": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GenPersAccTokenSyncSourceLambdaFunction\"][\"Properties\"][\"VpcConfig\"][\"SubnetIds\"]"
          }
        },
        "events": [],
        "name": "tasq-api-prod-GenPersAccTokenSyncSource",
        "package": {},
        "memory": 192
      },
      "GetPersAccTokenSyncSource": {
        "DependsOn": "AppSyncSourceLambdaRole",
        "description": "Lambda data-source for appsync endpoint: Get personal access token",
        "handler": "src/functions/appsync_resolver/appsync_sources.get_auth_token",
        "memorySize": 192,
        "timeout": 30,
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetPersAccTokenSyncSourceLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "runtime": "python3.7",
        "environment": {
          "API_GATEWAY_TOKENS_TABLE": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetPersAccTokenSyncSourceLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"API_GATEWAY_TOKENS_TABLE\"]"
          }
        },
        "vpc": {
          "securityGroupIds": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetPersAccTokenSyncSourceLambdaFunction\"][\"Properties\"][\"VpcConfig\"][\"SecurityGroupIds\"]"
          },
          "subnetIds": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetPersAccTokenSyncSourceLambdaFunction\"][\"Properties\"][\"VpcConfig\"][\"SubnetIds\"]"
          }
        },
        "events": [],
        "name": "tasq-api-prod-GetPersAccTokenSyncSource",
        "package": {},
        "memory": 192
      }
    },
    "resources": {
      "Parameters": {
        "Ec2ContainerService": {
          "Type": "String",
          "Default": "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
        },
        "ECSTaskExecutionRole": {
          "Type": "String",
          "Default": "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        },
        "CloudWatchLogsPolicy": {
          "Type": "String",
          "Default": "arn:aws:iam::711589413744:policy/ECS-CloudWatchLogs"
        },
        "AmazonDynamoDBFullAccess": {
          "Type": "String",
          "Default": "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        },
        "AppSyncTutorialAmazonDynamoDBPolicy": {
          "Type": "String",
          "Default": "arn:aws:iam::711589413744:policy/deepdish/TestAppsyncDynamoDB-AppSyncTutorialAmazonDynamoDBPolicy-TSRDEN6AVMDO"
        }
      },
      "Resources": {
        "AppsyncAccessDynamoDB": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "dynamodb.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "ManagedPolicyArns": [
              "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
              "arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole",
              "arn:aws:iam::aws:policy/AWSLambdaInvocation-DynamoDB",
              "arn:aws:iam::aws:policy/SecretsManagerReadWrite",
              "arn:aws:iam::711589413744:policy/FullCognitoIdentityAccess",
              "arn:aws:iam::aws:policy/AmazonCognitoPowerUser"
            ]
          }
        },
        "AppSyncSourceLambdaRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "ManagedPolicyArns": [
              "arn:aws:iam::aws:policy/AWSLambdaExecute",
              "arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess",
              "arn:aws:iam::aws:policy/SecretsManagerReadWrite",
              "arn:aws:iam::711589413744:policy/FullCognitoIdentityAccess",
              "arn:aws:iam::aws:policy/AmazonCognitoPowerUser",
              "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
            ],
            "Policies": [
              {
                "PolicyName": "Lambda-AppSyncSourceSecrets-Policy",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "secretsmanager:GetSecretValue",
                        "secretsmanager:ListSecrets",
                        "secretsmanager:ListSecretVersionIds"
                      ],
                      "Resource": [
                        "arn:aws:secretsmanager:us-east-2:711589413744:secret:influx/enerplus/prod/cloud-EENOZI"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "AppSyncLambdaServiceRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "appsync.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "Lambda-AppSyncServiceRole-Policy",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "lambda:invokeFunction"
                      ],
                      "Resource": [
                        "*"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "AppSyncPushToCloudwatchRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "appsync.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "ManagedPolicyArns": [
              "arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs",
              "arn:aws:iam::aws:policy/SecretsManagerReadWrite",
              "arn:aws:iam::711589413744:policy/FullCognitoIdentityAccess",
              "arn:aws:iam::aws:policy/AmazonCognitoPowerUser"
            ]
          }
        },
        "RestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
            "Name": "Api"
          }
        },
        "RestApiAuthorizer": {
          "Type": "AWS::ApiGateway::Authorizer",
          "Properties": {
            "AuthorizerCredentials": {
              "Fn::GetAtt": [
                "RestApiAuthorizerRole",
                "Arn"
              ]
            },
            "AuthorizerResultTtlInSeconds": 300,
            "AuthorizerUri": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:apigateway:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":lambda:path/2015-03-31/functions/",
                  "arn:aws:lambda:us-east-2:711589413744:function:tasq-api-prod-AuthAppSyncSource",
                  "/invocations"
                ]
              ]
            },
            "IdentitySource": "method.request.header.Authorization",
            "Name": "api-authorizer",
            "RestApiId": {
              "Ref": "RestApi"
            },
            "Type": "TOKEN"
          }
        },
        "Lambda": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "ZipFile": "import json\n\ndef lambda_handler(event, context):\n    # TODO implement\n    return {\n        'statusCode': 200,\n        'body': 'Hello from Lambda!!!!!!!!!!!!'\n    }\n"
            },
            "Handler": "index.lambda_handler",
            "MemorySize": 128,
            "Role": {
              "Fn::GetAtt": [
                "AuthLambdaRole",
                "Arn"
              ]
            },
            "Runtime": "python3.7",
            "Timeout": 60
          }
        },
        "AuthLambdaRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "ManagedPolicyArns": [
              "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            ],
            "Policies": [
              {
                "PolicyName": "dynamodb",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Sid": "1",
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:GetItem"
                      ],
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:aws:dynamodb:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":",
                              {
                                "Ref": "AWS::AccountId"
                              },
                              ":table/auth-token"
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "RestApiAuthorizerRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "apigateway.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "lambda",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": "lambda:invokeFunction",
                      "Resource": [
                        "arn:aws:lambda:us-east-2:711589413744:function:tasq-api-prod-AuthAppSyncSource"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "Model": {
          "Type": "AWS::ApiGateway::Model",
          "Properties": {
            "ContentType": "application/json",
            "Name": "user",
            "RestApiId": {
              "Ref": "RestApi"
            },
            "Schema": {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "title": "user",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "name"
              ]
            }
          }
        },
        "ProfileResource": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ParentId": {
              "Fn::GetAtt": [
                "RestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "users"
          }
        },
        "GetProfilesLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Fn::ImportValue": "tasq-assign-user-tasks-prod:GetAllUsersSyncSource"
            },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "RestApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "GetProfiles": {
          "Type": "AWS::ApiGateway::Method",
          "DependsOn": "GetProfilesLambdaPermission",
          "Properties": {
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "RestApiAuthorizer"
            },
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ResourceId": {
              "Ref": "ProfileResource"
            },
            "HttpMethod": "GET",
            "Integration": {
              "Type": "AWS",
              "IntegrationHttpMethod": "POST",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::ImportValue": "tasq-assign-user-tasks-prod:GetAllUsersSyncSource"
                    },
                    "/invocations"
                  ]
                ]
              },
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ]
            },
            "RequestModels": {
              "application/json": {
                "Ref": "Model"
              }
            },
            "RequestParameters": {
              "method.request.header.Authorization": true
            },
            "MethodResponses": [
              {
                "ResponseModels": {
                  "application/json": "Empty"
                },
                "StatusCode": 200
              }
            ]
          }
        },
        "PostProfileLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Fn::ImportValue": "tasq-assign-user-tasks-prod:UserSignUpSyncSource"
            },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "RestApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "PostProfile": {
          "Type": "AWS::ApiGateway::Method",
          "DependsOn": "PostProfileLambdaPermission",
          "Properties": {
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "RestApiAuthorizer"
            },
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ResourceId": {
              "Ref": "ProfileResource"
            },
            "HttpMethod": "POST",
            "Integration": {
              "Type": "AWS",
              "IntegrationHttpMethod": "POST",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::ImportValue": "tasq-assign-user-tasks-prod:UserSignUpSyncSource"
                    },
                    "/invocations"
                  ]
                ]
              },
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ],
              "RequestTemplates": {
                "application/json": "{\"UserEmail\": \"$input.params('email')\",\"PhoneNumber\": \"$input.params('phone_number')\",\"Roles\": \"$input.params('roles')\"}"
              }
            },
            "RequestModels": {
              "application/json": {
                "Ref": "Model"
              }
            },
            "RequestParameters": {
              "method.request.header.Authorization": true
            },
            "MethodResponses": [
              {
                "ResponseModels": {
                  "application/json": "Empty"
                },
                "StatusCode": 200
              }
            ]
          }
        },
        "ProfileUserResource": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ParentId": {
              "Ref": "ProfileResource"
            },
            "PathPart": "{user}"
          }
        },
        "GetProfileUserLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Fn::ImportValue": "tasq-assign-user-tasks-prod:GetUserDetailsSyncSource"
            },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "RestApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "GetProfileUser": {
          "Type": "AWS::ApiGateway::Method",
          "DependsOn": "GetProfileUserLambdaPermission",
          "Properties": {
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "RestApiAuthorizer"
            },
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ResourceId": {
              "Ref": "ProfileUserResource"
            },
            "HttpMethod": "GET",
            "Integration": {
              "Type": "AWS",
              "IntegrationHttpMethod": "POST",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::ImportValue": "tasq-assign-user-tasks-prod:GetUserDetailsSyncSource"
                    },
                    "/invocations"
                  ]
                ]
              },
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ],
              "RequestTemplates": {
                "application/json": "{\"username\": \"$input.params('username')\"}"
              }
            },
            "RequestModels": {
              "application/json": {
                "Ref": "Model"
              }
            },
            "RequestParameters": {
              "method.request.header.Authorization": true
            },
            "MethodResponses": [
              {
                "ResponseModels": {
                  "application/json": "Empty"
                },
                "StatusCode": 200
              }
            ]
          }
        },
        "PutProfileUserLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Fn::ImportValue": "tasq-assign-user-tasks-prod:UpdateProfileSyncSource"
            },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "RestApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "PutProfileUser": {
          "Type": "AWS::ApiGateway::Method",
          "DependsOn": "PutProfileUserLambdaPermission",
          "Properties": {
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "RestApiAuthorizer"
            },
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ResourceId": {
              "Ref": "ProfileUserResource"
            },
            "HttpMethod": "PUT",
            "Integration": {
              "Type": "AWS",
              "IntegrationHttpMethod": "POST",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::ImportValue": "tasq-assign-user-tasks-prod:UpdateProfileSyncSource"
                    },
                    "/invocations"
                  ]
                ]
              },
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ],
              "RequestTemplates": {
                "application/json": "{\"Username\": \"$input.params('username')\",\"Team\": \"$input.params('teams')\",\"Roles\": \"$input.params('roles')\",\"UserEmail\": \"$input.params('email')\",\"PhoneNumber\": \"$input.params('phone_number')\",\"AcceptingTasqs\": \"$input.params('accepting_tasqs')\"}"
              }
            },
            "RequestModels": {
              "application/json": {
                "Ref": "Model"
              }
            },
            "RequestParameters": {
              "method.request.header.Authorization": true
            },
            "MethodResponses": [
              {
                "ResponseModels": {
                  "application/json": "Empty"
                },
                "StatusCode": 200
              }
            ]
          }
        },
        "ResponsesResource": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ParentId": {
              "Fn::GetAtt": [
                "RestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "responses"
          }
        },
        "GetResponseLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Fn::ImportValue": "tasq-detect-state-change-prod:GetUserResponsesSyncSource"
            },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "RestApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "GetResponse": {
          "Type": "AWS::ApiGateway::Method",
          "DependsOn": "GetResponseLambdaPermission",
          "Properties": {
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "RestApiAuthorizer"
            },
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ResourceId": {
              "Ref": "ResponsesResource"
            },
            "HttpMethod": "GET",
            "Integration": {
              "Type": "AWS",
              "IntegrationHttpMethod": "POST",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::ImportValue": "tasq-detect-state-change-prod:GetUserResponsesSyncSource"
                    },
                    "/invocations"
                  ]
                ]
              },
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ]
            },
            "RequestModels": {
              "application/json": {
                "Ref": "Model"
              }
            },
            "RequestParameters": {
              "method.request.header.Authorization": true
            },
            "MethodResponses": [
              {
                "ResponseModels": {
                  "application/json": "Empty"
                },
                "StatusCode": 200
              }
            ]
          }
        },
        "ResponsesUserResource": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ParentId": {
              "Ref": "ResponsesResource"
            },
            "PathPart": "{response_id}"
          }
        },
        "PostUserResponseLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Fn::ImportValue": "tasq-detect-state-change-prod:UpdateUserResponseSyncSource"
            },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "RestApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "PostUserResponse": {
          "Type": "AWS::ApiGateway::Method",
          "DependsOn": "PostUserResponseLambdaPermission",
          "Properties": {
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "RestApiAuthorizer"
            },
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ResourceId": {
              "Ref": "ResponsesResource"
            },
            "HttpMethod": "POST",
            "Integration": {
              "Type": "AWS",
              "IntegrationHttpMethod": "POST",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::ImportValue": "tasq-detect-state-change-prod:UpdateUserResponseSyncSource"
                    },
                    "/invocations"
                  ]
                ]
              },
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ],
              "RequestTemplates": {
                "application/json": "{\"id\": \"$input.params('tasq_id')\",\"PredictionID\": \"$input.params('id')\",\"ResponseData\": \"$input.params('response_data')\",\"MarkAsComplete\": \"$input.params('mark_as_complete')\"}"
              }
            },
            "RequestModels": {
              "application/json": {
                "Ref": "Model"
              }
            },
            "RequestParameters": {
              "method.request.header.Authorization": true
            },
            "MethodResponses": [
              {
                "ResponseModels": {
                  "application/json": "Empty"
                },
                "StatusCode": 200
              }
            ]
          }
        },
        "PutResponseUserPredictionLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Fn::ImportValue": "tasq-detect-state-change-prod:UpdateUserResponseSyncSource"
            },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "RestApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "PutResponseUserPrediction": {
          "Type": "AWS::ApiGateway::Method",
          "DependsOn": "PutResponseUserPredictionLambdaPermission",
          "Properties": {
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "RestApiAuthorizer"
            },
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ResourceId": {
              "Ref": "ResponsesUserResource"
            },
            "HttpMethod": "POST",
            "Integration": {
              "Type": "AWS",
              "IntegrationHttpMethod": "POST",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::ImportValue": "tasq-detect-state-change-prod:UpdateUserResponseSyncSource"
                    },
                    "/invocations"
                  ]
                ]
              },
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ],
              "RequestTemplates": {
                "application/json": "{\"id\": \"$input.params('response_id')\",\"mark_as_complete\": $input.json('$.mark_as_complete') ,\"response_data\": $input.json('$.response_data'),\"body\" : $input.json('$') }"
              }
            },
            "RequestModels": {
              "application/json": {
                "Ref": "Model"
              }
            },
            "RequestParameters": {
              "method.request.header.Authorization": true
            },
            "MethodResponses": [
              {
                "ResponseModels": {
                  "application/json": "Empty"
                },
                "StatusCode": 200
              }
            ]
          }
        },
        "DeleteResponseUserPredictionLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Fn::ImportValue": "tasq-detect-state-change-prod:DeleteUserResponseSyncSource"
            },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "RestApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "DeleteResponseUserPrediction": {
          "Type": "AWS::ApiGateway::Method",
          "DependsOn": "DeleteResponseUserPredictionLambdaPermission",
          "Properties": {
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "RestApiAuthorizer"
            },
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ResourceId": {
              "Ref": "ResponsesUserResource"
            },
            "HttpMethod": "DELETE",
            "Integration": {
              "Type": "AWS",
              "IntegrationHttpMethod": "POST",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::ImportValue": "tasq-detect-state-change-prod:DeleteUserResponseSyncSource"
                    },
                    "/invocations"
                  ]
                ]
              },
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ],
              "RequestTemplates": {
                "application/json": "{\"PredictionID\": \"$input.params('id')\"}"
              }
            },
            "RequestModels": {
              "application/json": {
                "Ref": "Model"
              }
            },
            "RequestParameters": {
              "method.request.header.Authorization": true
            },
            "MethodResponses": [
              {
                "ResponseModels": {
                  "application/json": "Empty"
                },
                "StatusCode": 200
              }
            ]
          }
        },
        "GetResponseUserPredictionLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Fn::ImportValue": "tasq-detect-state-change-prod:GetUserResponseSyncSource"
            },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "RestApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "GetResponseUserPrediction": {
          "Type": "AWS::ApiGateway::Method",
          "DependsOn": "GetResponseUserPredictionLambdaPermission",
          "Properties": {
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "RestApiAuthorizer"
            },
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ResourceId": {
              "Ref": "ResponsesUserResource"
            },
            "HttpMethod": "GET",
            "Integration": {
              "Type": "AWS",
              "IntegrationHttpMethod": "POST",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::ImportValue": "tasq-detect-state-change-prod:GetUserResponseSyncSource"
                    },
                    "/invocations"
                  ]
                ]
              },
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ],
              "RequestTemplates": {
                "application/json": "{\"prediction_id\": \"$input.params('id')\"}"
              }
            },
            "RequestModels": {
              "application/json": {
                "Ref": "Model"
              }
            },
            "RequestParameters": {
              "method.request.header.Authorization": true
            },
            "MethodResponses": [
              {
                "ResponseModels": {
                  "application/json": "Empty"
                },
                "StatusCode": 200
              }
            ]
          }
        },
        "TasqsResource": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ParentId": {
              "Fn::GetAtt": [
                "RestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "tasqs"
          }
        },
        "GetTasqsLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Fn::ImportValue": "tasq-detect-state-change-prod:GetAllTasqsSyncSource"
            },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "RestApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "GetTasqs": {
          "Type": "AWS::ApiGateway::Method",
          "DependsOn": "GetTasqsLambdaPermission",
          "Properties": {
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "RestApiAuthorizer"
            },
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ResourceId": {
              "Ref": "TasqsResource"
            },
            "HttpMethod": "GET",
            "Integration": {
              "Type": "AWS",
              "IntegrationHttpMethod": "POST",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::ImportValue": "tasq-detect-state-change-prod:GetAllTasqsSyncSource"
                    },
                    "/invocations"
                  ]
                ]
              },
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ],
              "RequestTemplates": {
                "application/json": "{\"team\": \"$input.params('team')\",\"username\": \"$input.params('username')\"}"
              }
            },
            "RequestModels": {
              "application/json": {
                "Ref": "Model"
              }
            },
            "RequestParameters": {
              "method.request.header.Authorization": true
            },
            "MethodResponses": [
              {
                "ResponseModels": {
                  "application/json": "Empty"
                },
                "StatusCode": 200
              }
            ]
          }
        },
        "PostTasqsLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Fn::ImportValue": "tasq-detect-state-change-prod:PostNewTasqSyncSource"
            },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "RestApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "PostTasqs": {
          "Type": "AWS::ApiGateway::Method",
          "DependsOn": "PostTasqsLambdaPermission",
          "Properties": {
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "RestApiAuthorizer"
            },
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ResourceId": {
              "Ref": "TasqsResource"
            },
            "HttpMethod": "POST",
            "Integration": {
              "Type": "AWS",
              "IntegrationHttpMethod": "POST",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::ImportValue": "tasq-detect-state-change-prod:PostNewTasqSyncSource"
                    },
                    "/invocations"
                  ]
                ]
              },
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ],
              "RequestTemplates": {
                "application/json": "{\"AssignedToUsername\": \"$input.params('assign_to_user')\",\"NodeID\": \"$input.params('node_id')\",\"PredictionType\": \"$input.params('type')\"}"
              }
            },
            "RequestModels": {
              "application/json": {
                "Ref": "Model"
              }
            },
            "RequestParameters": {
              "method.request.header.Authorization": true
            },
            "MethodResponses": [
              {
                "ResponseModels": {
                  "application/json": "Empty"
                },
                "StatusCode": 200
              }
            ]
          }
        },
        "TasqsTasqResource": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ParentId": {
              "Ref": "TasqsResource"
            },
            "PathPart": "{tasq_id}"
          }
        },
        "DeleteTasqTasqLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Fn::ImportValue": "tasq-detect-state-change-prod:DeleteTasqSyncSource"
            },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "RestApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "DeleteTasqTasqPrediction": {
          "Type": "AWS::ApiGateway::Method",
          "DependsOn": "DeleteTasqTasqLambdaPermission",
          "Properties": {
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "RestApiAuthorizer"
            },
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ResourceId": {
              "Ref": "TasqsTasqResource"
            },
            "HttpMethod": "DELETE",
            "Integration": {
              "Type": "AWS",
              "IntegrationHttpMethod": "POST",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::ImportValue": "tasq-detect-state-change-prod:DeleteTasqSyncSource"
                    },
                    "/invocations"
                  ]
                ]
              },
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ],
              "RequestTemplates": {
                "application/json": "{\"PredictionID\": \"$input.params('id')\"}"
              }
            },
            "RequestModels": {
              "application/json": {
                "Ref": "Model"
              }
            },
            "RequestParameters": {
              "method.request.header.Authorization": true
            },
            "MethodResponses": [
              {
                "ResponseModels": {
                  "application/json": "Empty"
                },
                "StatusCode": 200
              }
            ]
          }
        },
        "GetTasqTasqLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Fn::ImportValue": "tasq-detect-state-change-prod:GetPredictionRowSyncSource"
            },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "RestApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "GetTasqTasqPrediction": {
          "Type": "AWS::ApiGateway::Method",
          "DependsOn": "GetTasqTasqLambdaPermission",
          "Properties": {
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "RestApiAuthorizer"
            },
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ResourceId": {
              "Ref": "TasqsTasqResource"
            },
            "HttpMethod": "GET",
            "Integration": {
              "Type": "AWS",
              "IntegrationHttpMethod": "POST",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::ImportValue": "tasq-detect-state-change-prod:GetPredictionRowSyncSource"
                    },
                    "/invocations"
                  ]
                ]
              },
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ],
              "RequestTemplates": {
                "application/json": "{\"PredictionID\": \"$input.params('id')\"}"
              }
            },
            "RequestModels": {
              "application/json": {
                "Ref": "Model"
              }
            },
            "RequestParameters": {
              "method.request.header.Authorization": true
            },
            "MethodResponses": [
              {
                "ResponseModels": {
                  "application/json": "Empty"
                },
                "StatusCode": 200
              }
            ]
          }
        },
        "PutTasqTasqLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Fn::ImportValue": "tasq-detect-state-change-prod:UpdateTasqSyncSource"
            },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "RestApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "PutTasqTasqPrediction": {
          "Type": "AWS::ApiGateway::Method",
          "DependsOn": "PutTasqTasqLambdaPermission",
          "Properties": {
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "RestApiAuthorizer"
            },
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ResourceId": {
              "Ref": "TasqsTasqResource"
            },
            "HttpMethod": "PUT",
            "Integration": {
              "Type": "AWS",
              "IntegrationHttpMethod": "POST",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::ImportValue": "tasq-detect-state-change-prod:UpdateTasqSyncSource"
                    },
                    "/invocations"
                  ]
                ]
              },
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ],
              "RequestTemplates": {
                "application/json": "{\"PredictionID\": \"$input.params('id')\"}"
              }
            },
            "RequestModels": {
              "application/json": {
                "Ref": "Model"
              }
            },
            "RequestParameters": {
              "method.request.header.Authorization": true
            },
            "MethodResponses": [
              {
                "ResponseModels": {
                  "application/json": "Empty"
                },
                "StatusCode": 200
              }
            ]
          }
        },
        "TicketResource": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ParentId": {
              "Fn::GetAtt": [
                "RestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "tickets"
          }
        },
        "PostTicketsLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Fn::ImportValue": "tasq-analytics-prod:SubmitTicketSyncSource"
            },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "RestApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "PostTickets": {
          "Type": "AWS::ApiGateway::Method",
          "DependsOn": "PostTicketsLambdaPermission",
          "Properties": {
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "RestApiAuthorizer"
            },
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ResourceId": {
              "Ref": "TicketResource"
            },
            "HttpMethod": "POST",
            "Integration": {
              "Type": "AWS",
              "IntegrationHttpMethod": "POST",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::ImportValue": "tasq-analytics-prod:SubmitTicketSyncSource"
                    },
                    "/invocations"
                  ]
                ]
              },
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ],
              "RequestTemplates": {
                "application/json": "{\"Username\": \"$input.params('username')\",\"Description\": \"$input.params('description')\",\"TicketTitle\": \"$input.params('ticket_title')\",\"IssueType\": \"$input.params('issue_type')\",\"Page\": \"$input.params('page')\",\"Operator\": \"$input.params('operator')\"}"
              }
            },
            "RequestModels": {
              "application/json": {
                "Ref": "Model"
              }
            },
            "RequestParameters": {
              "method.request.header.Authorization": true
            },
            "MethodResponses": [
              {
                "ResponseModels": {
                  "application/json": "Empty"
                },
                "StatusCode": 200
              }
            ]
          }
        },
        "GetTicketsLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Fn::ImportValue": "tasq-analytics-prod:GetTrackedTicketsSyncSource"
            },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "RestApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "GetTickets": {
          "Type": "AWS::ApiGateway::Method",
          "DependsOn": "GetTicketsLambdaPermission",
          "Properties": {
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "RestApiAuthorizer"
            },
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ResourceId": {
              "Ref": "TicketResource"
            },
            "HttpMethod": "GET",
            "Integration": {
              "Type": "AWS",
              "IntegrationHttpMethod": "POST",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::ImportValue": "tasq-analytics-prod:GetTrackedTicketsSyncSource"
                    },
                    "/invocations"
                  ]
                ]
              },
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ],
              "RequestTemplates": {
                "application/json": "{\"IssueType\": \"$input.params('issue_type')\",\"Username\": \"$input.params('username')\"}"
              }
            },
            "RequestModels": {
              "application/json": {
                "Ref": "Model"
              }
            },
            "RequestParameters": {
              "method.request.header.Authorization": true
            },
            "MethodResponses": [
              {
                "ResponseModels": {
                  "application/json": "Empty"
                },
                "StatusCode": 200
              }
            ]
          }
        },
        "TicketIDResource": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ParentId": {
              "Ref": "TicketResource"
            },
            "PathPart": "{ticket_id}"
          }
        },
        "DeleteTicketLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Fn::ImportValue": "tasq-analytics-prod:DeleteTicketSyncSource"
            },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "RestApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "DeleteTicket": {
          "Type": "AWS::ApiGateway::Method",
          "DependsOn": "DeleteTicketLambdaPermission",
          "Properties": {
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "RestApiAuthorizer"
            },
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ResourceId": {
              "Ref": "TicketIDResource"
            },
            "HttpMethod": "DELETE",
            "Integration": {
              "Type": "AWS",
              "IntegrationHttpMethod": "POST",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::ImportValue": "tasq-analytics-prod:DeleteTicketSyncSource"
                    },
                    "/invocations"
                  ]
                ]
              },
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ],
              "RequestTemplates": {
                "application/json": "{\"TicketId\": \"$input.params('id')\"}"
              }
            },
            "RequestModels": {
              "application/json": {
                "Ref": "Model"
              }
            },
            "RequestParameters": {
              "method.request.header.Authorization": true
            },
            "MethodResponses": [
              {
                "ResponseModels": {
                  "application/json": "Empty"
                },
                "StatusCode": 200
              }
            ]
          }
        },
        "GetTicketLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Fn::ImportValue": "tasq-analytics-prod:GetTicketSyncSource"
            },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "RestApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "GetTicket": {
          "Type": "AWS::ApiGateway::Method",
          "DependsOn": "GetTicketLambdaPermission",
          "Properties": {
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "RestApiAuthorizer"
            },
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ResourceId": {
              "Ref": "TicketIDResource"
            },
            "HttpMethod": "GET",
            "Integration": {
              "Type": "AWS",
              "IntegrationHttpMethod": "POST",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::ImportValue": "tasq-analytics-prod:GetTicketSyncSource"
                    },
                    "/invocations"
                  ]
                ]
              },
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ],
              "RequestTemplates": {
                "application/json": "{\"TicketId\": \"$input.params('id')\"}"
              }
            },
            "RequestModels": {
              "application/json": {
                "Ref": "Model"
              }
            },
            "RequestParameters": {
              "method.request.header.Authorization": true
            },
            "MethodResponses": [
              {
                "ResponseModels": {
                  "application/json": "Empty"
                },
                "StatusCode": 200
              }
            ]
          }
        },
        "WorkflowResource": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ParentId": {
              "Fn::GetAtt": [
                "RestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "workflows"
          }
        },
        "PostWorkflowLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Fn::ImportValue": "tasq-assign-user-tasks-prod:PostWorkflowSyncSource"
            },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "RestApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "PostWorkflow": {
          "Type": "AWS::ApiGateway::Method",
          "DependsOn": "PostWorkflowLambdaPermission",
          "Properties": {
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "RestApiAuthorizer"
            },
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ResourceId": {
              "Ref": "WorkflowResource"
            },
            "HttpMethod": "POST",
            "Integration": {
              "Type": "AWS",
              "IntegrationHttpMethod": "POST",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::ImportValue": "tasq-assign-user-tasks-prod:PostWorkflowSyncSource"
                    },
                    "/invocations"
                  ]
                ]
              },
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ],
              "RequestTemplates": {
                "application/json": "{\"WorkflowDetailsID\": \"$input.params('id')\",\"Username\": \"$input.params('username')\"}"
              }
            },
            "RequestModels": {
              "application/json": {
                "Ref": "Model"
              }
            },
            "RequestParameters": {
              "method.request.header.Authorization": true
            },
            "MethodResponses": [
              {
                "ResponseModels": {
                  "application/json": "Empty"
                },
                "StatusCode": 200
              }
            ]
          }
        },
        "LambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Fn::GetAtt": [
                "Lambda",
                "Arn"
              ]
            },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "RestApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "GetWorkflowsLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Fn::ImportValue": "tasq-assign-user-tasks-prod:GetAllWorkflowsSyncSource"
            },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "RestApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "GetWorkflows": {
          "Type": "AWS::ApiGateway::Method",
          "DependsOn": "GetWorkflowsLambdaPermission",
          "Properties": {
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "RestApiAuthorizer"
            },
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ResourceId": {
              "Ref": "WorkflowResource"
            },
            "HttpMethod": "GET",
            "Integration": {
              "Type": "AWS",
              "IntegrationHttpMethod": "POST",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::ImportValue": "tasq-assign-user-tasks-prod:GetAllWorkflowsSyncSource"
                    },
                    "/invocations"
                  ]
                ]
              },
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ]
            },
            "RequestModels": {
              "application/json": {
                "Ref": "Model"
              }
            },
            "RequestParameters": {
              "method.request.header.Authorization": true
            },
            "MethodResponses": [
              {
                "ResponseModels": {
                  "application/json": "Empty"
                },
                "StatusCode": 200
              }
            ]
          }
        },
        "WorkflowUserResource": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ParentId": {
              "Ref": "WorkflowResource"
            },
            "PathPart": "{workflow_id}"
          }
        },
        "PutWorkflowLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Fn::ImportValue": "tasq-assign-user-tasks-prod:UpdateWorkflowSyncSource"
            },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "RestApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "PutWorkflow": {
          "Type": "AWS::ApiGateway::Method",
          "DependsOn": "PutWorkflowLambdaPermission",
          "Properties": {
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "RestApiAuthorizer"
            },
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ResourceId": {
              "Ref": "WorkflowUserResource"
            },
            "HttpMethod": "PUT",
            "Integration": {
              "Type": "AWS",
              "IntegrationHttpMethod": "POST",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::ImportValue": "tasq-assign-user-tasks-prod:UpdateWorkflowSyncSource"
                    },
                    "/invocations"
                  ]
                ]
              },
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ],
              "RequestTemplates": {
                "application/json": "{\"WorkflowDetailsID\": \"$input.params('id')\",\"Settings\": \"$input.params('settings')\",\"Username\": \"$input.params('username')\"}"
              }
            },
            "RequestModels": {
              "application/json": {
                "Ref": "Model"
              }
            },
            "RequestParameters": {
              "method.request.header.Authorization": true
            },
            "MethodResponses": [
              {
                "ResponseModels": {
                  "application/json": "Empty"
                },
                "StatusCode": 200
              }
            ]
          }
        },
        "DeleteWorkflowPredictionLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Fn::ImportValue": "tasq-assign-user-tasks-prod:DeleteWorkflowSyncSource"
            },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "RestApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "DeleteWorkflowPrediction": {
          "Type": "AWS::ApiGateway::Method",
          "DependsOn": "DeleteWorkflowPredictionLambdaPermission",
          "Properties": {
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "RestApiAuthorizer"
            },
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ResourceId": {
              "Ref": "WorkflowUserResource"
            },
            "HttpMethod": "DELETE",
            "Integration": {
              "Type": "AWS",
              "IntegrationHttpMethod": "POST",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::ImportValue": "tasq-assign-user-tasks-prod:DeleteWorkflowSyncSource"
                    },
                    "/invocations"
                  ]
                ]
              },
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ],
              "RequestTemplates": {
                "application/json": "{\"WorkflowDetailsID\": \"$input.params('id')\"}"
              }
            },
            "RequestModels": {
              "application/json": {
                "Ref": "Model"
              }
            },
            "RequestParameters": {
              "method.request.header.Authorization": true
            },
            "MethodResponses": [
              {
                "ResponseModels": {
                  "application/json": "Empty"
                },
                "StatusCode": 200
              }
            ]
          }
        },
        "GetWorkflowPredictionLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": {
              "Fn::ImportValue": "tasq-assign-user-tasks-prod:GetWorkflowSyncSource"
            },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "RestApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "GetWorkflowPrediction": {
          "Type": "AWS::ApiGateway::Method",
          "DependsOn": "GetWorkflowPredictionLambdaPermission",
          "Properties": {
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "RestApiAuthorizer"
            },
            "RestApiId": {
              "Ref": "RestApi"
            },
            "ResourceId": {
              "Ref": "WorkflowUserResource"
            },
            "HttpMethod": "GET",
            "Integration": {
              "Type": "AWS",
              "IntegrationHttpMethod": "POST",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::ImportValue": "tasq-assign-user-tasks-prod:GetWorkflowSyncSource"
                    },
                    "/invocations"
                  ]
                ]
              },
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ],
              "RequestTemplates": {
                "application/json": "{\"WorkflowDetailsID\": \"$input.params('id')\",\"AssignmentCountDays\": \"$input.params('days')\"}"
              }
            },
            "RequestModels": {
              "application/json": {
                "Ref": "Model"
              }
            },
            "RequestParameters": {
              "method.request.header.Authorization": true
            },
            "MethodResponses": [
              {
                "ResponseModels": {
                  "application/json": "Empty"
                },
                "StatusCode": 200
              }
            ]
          }
        },
        "StageV1Deployment": {
          "Type": "AWS::ApiGateway::Deployment",
          "DependsOn": "ProfileResource",
          "Properties": {
            "RestApiId": {
              "Ref": "RestApi"
            }
          }
        },
        "StageV1": {
          "Type": "AWS::ApiGateway::Stage",
          "DependsOn": "StageV1Deployment",
          "Properties": {
            "StageName": "v1",
            "Description": "API Version 1",
            "DeploymentId": {
              "Ref": "StageV1Deployment"
            },
            "RestApiId": {
              "Ref": "RestApi"
            }
          }
        },
        "ApiGatewayTokensTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "TokenID",
                "AttributeType": "S"
              },
              {
                "AttributeName": "Username",
                "AttributeType": "S"
              },
              {
                "AttributeName": "AccessToken",
                "AttributeType": "S"
              },
              {
                "AttributeName": "time",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "TokenID",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "time",
                "KeyType": "RANGE"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "User-index",
                "KeySchema": [
                  {
                    "AttributeName": "Username",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                },
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 5,
                  "WriteCapacityUnits": 5
                }
              },
              {
                "IndexName": "AccessToken-index",
                "KeySchema": [
                  {
                    "AttributeName": "AccessToken",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                },
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 5,
                  "WriteCapacityUnits": 5
                }
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 5,
              "WriteCapacityUnits": 5
            }
          }
        },
        "AuthTableQueryApi": {
          "Type": "AWS::AppSync::GraphQLApi",
          "Properties": {
            "AuthenticationType": "AMAZON_COGNITO_USER_POOLS",
            "Name": "AuthTableQueryApi-prod",
            "UserPoolConfig": {
              "AwsRegion": "us-east-1",
              "DefaultAction": "ALLOW",
              "UserPoolId": "us-east-1_VwUkzXfIT"
            },
            "LogConfig": {
              "CloudWatchLogsRoleArn": {
                "Fn::GetAtt": [
                  "AppSyncPushToCloudwatchRole",
                  "Arn"
                ]
              },
              "ExcludeVerboseContent": "false",
              "FieldLogLevel": "ALL"
            }
          }
        },
        "AnalyticsQuerySchema": {
          "Type": "AWS::AppSync::GraphQLSchema",
          "Properties": {
            "ApiId": {
              "Fn::GetAtt": [
                "AuthTableQueryApi",
                "ApiId"
              ]
            },
            "Definition": "\n\n\ntype Mutation {\n  generate_personal_access_token(input: CreateNewAuthTokenInput): CreateNewAuthTokenOutput\n\t\t@aws_auth(cognito_groups: [\"NormalGroup\",\"AdminGroup\",\"Engineers\",\"Automation\",\"Testing\",\"FieldOperator\",\"Intervention\",\"Maintenance\",\"NormalGroup\",\"Operators\",\"Optimizer\",\"SafetyCritical\"])\n}\n\ninput CreateNewAuthTokenInput {\n  Username: String!\n  TokenName: String!\n}\n\ntype CreateNewAuthTokenOutput {\n  TokenID: String\n  time: String\n  Username: String\n  AccessToken: String\n  TokenName: String\n}\n\n\ntype Query {\n  get_personal_access_token(input: GetAuthTokensInput): GetAuthTokensOutput\n}\n\ninput GetAuthTokensInput {\n  Username: String!\n}\n\ntype GetAuthTokensOutput {\n  TokenData: [AWSJSON]\n}\n\n\nschema {\n\tquery: Query\n    mutation: Mutation\n}\n"
          }
        },
        "GenPersAccTokenSyncSource": {
          "Type": "AWS::AppSync::DataSource",
          "Properties": {
            "ApiId": {
              "Fn::GetAtt": [
                "AuthTableQueryApi",
                "ApiId"
              ]
            },
            "LambdaConfig": {
              "LambdaFunctionArn": {
                "Fn::GetAtt": [
                  "GenPersAccTokenSyncSourceLambdaFunction",
                  "Arn"
                ]
              }
            },
            "Name": "generate_personal_access_token",
            "ServiceRoleArn": {
              "Fn::GetAtt": [
                "AppSyncLambdaServiceRole",
                "Arn"
              ]
            },
            "Type": "AWS_LAMBDA"
          }
        },
        "GenPersAccTokenAppSyncQueryResolver1": {
          "Type": "AWS::AppSync::Resolver",
          "DependsOn": "AnalyticsQuerySchema",
          "Properties": {
            "ApiId": {
              "Fn::GetAtt": [
                "AuthTableQueryApi",
                "ApiId"
              ]
            },
            "DataSourceName": {
              "Fn::GetAtt": [
                "GenPersAccTokenSyncSource",
                "Name"
              ]
            },
            "TypeName": "Mutation",
            "FieldName": "generate_personal_access_token",
            "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"Invoke\",\n    \"payload\": $utils.toJson($context.arguments)\n}\n",
            "ResponseMappingTemplate": "$utils.toJson($context.result)\n"
          }
        },
        "GetPersAccTokenSyncSource": {
          "Type": "AWS::AppSync::DataSource",
          "Properties": {
            "ApiId": {
              "Fn::GetAtt": [
                "AuthTableQueryApi",
                "ApiId"
              ]
            },
            "LambdaConfig": {
              "LambdaFunctionArn": {
                "Fn::GetAtt": [
                  "GetPersAccTokenSyncSourceLambdaFunction",
                  "Arn"
                ]
              }
            },
            "Name": "get_personal_access_token",
            "ServiceRoleArn": {
              "Fn::GetAtt": [
                "AppSyncLambdaServiceRole",
                "Arn"
              ]
            },
            "Type": "AWS_LAMBDA"
          }
        },
        "GetPersAccTokenAppSyncQueryResolver1": {
          "Type": "AWS::AppSync::Resolver",
          "DependsOn": "AnalyticsQuerySchema",
          "Properties": {
            "ApiId": {
              "Fn::GetAtt": [
                "AuthTableQueryApi",
                "ApiId"
              ]
            },
            "DataSourceName": {
              "Fn::GetAtt": [
                "GetPersAccTokenSyncSource",
                "Name"
              ]
            },
            "TypeName": "Query",
            "FieldName": "get_personal_access_token",
            "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"Invoke\",\n    \"payload\": $utils.toJson($context.arguments)\n}\n",
            "ResponseMappingTemplate": "$utils.toJson($context.result)\n"
          }
        }
      },
      "Outputs": {
        "ApiGatewayTokensTable": {
          "Description": "DynamoDB table for predictions jobs",
          "Value": {
            "Ref": "ApiGatewayTokensTable"
          },
          "Export": {
            "Name": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "ApiGatewayTokensTable"
                ]
              ]
            }
          }
        }
      }
    },
    "serviceFilename": "serverless.yml",
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/Users/jwenker/Documents/TasqProject/tasq-api/.serverless/tasq-api.zip"
  },
  "package": {
    "artifactDirectoryName": "tasq-api/serverless/tasq-api/prod/1594746356895-2020-07-14T17:05:56.895Z",
    "artifact": "tasq-api.zip"
  }
}