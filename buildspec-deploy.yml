version: 0.2
phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - 'curl -O https://bootstrap.pypa.io/get-pip.py'
      - python3 get-pip.py
      - pip install --upgrade pip
      - python --version
      - pip3 install -U setuptools
      - add-apt-repository main
      - add-apt-repository universe
      - add-apt-repository restricted
      - add-apt-repository multiverse
      - apt update
      - apt-get install -y unixodbc-dev
      - apt-get install python3-mysql.connector
      - apt-get install jq
      - find ./ -type f -name "requirements_for_testing.txt" -exec pip3 install -r  "{}"  \;
      - rm -rf tasq-codepipeline-repo
      - aws secretsmanager get-secret-value --secret-id github/code-pipeline/full-access-token > git_hub_access_token.json
      - GIT_HUB_ACCESS_TOKEN=$(jq -r '.SecretString' git_hub_access_token.json)
      - git clone https://$GIT_HUB_ACCESS_TOKEN@github.com/tasq-inc/tasq-codepipeline-repo.git
      - cp tasq-codepipeline-repo/requirements.txt .
      - pip3 install -r requirements.txt
      - CURRENT_REPO="$(python3 tasq-codepipeline-repo/get_repo_name.py)"
      - echo $CURRENT_REPO
      - rm -rf $CURRENT_REPO
      - git clone https://$GIT_HUB_ACCESS_TOKEN@github.com/tasq-inc/$CURRENT_REPO.git

  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - cp tasq-codepipeline-repo/build_and_push_images_in_path.py .
      - python3 build_and_push_images_in_path.py "us-east-2" $CURRENT_REPO


  post_build:
    commands:
      - echo Build completed on `date`, image was pushed
      - python3 tasq-codepipeline-repo/ecs_pull_newest_image.py