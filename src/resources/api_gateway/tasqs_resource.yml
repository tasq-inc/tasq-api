Resources: 
    
    TasqsResource:
        Type: AWS::ApiGateway::Resource
        Properties:
        RestApiId:
            Ref: RestApi
        ParentId:
            Fn::GetAtt:
            - RestApi
            - RootResourceId
        PathPart: tasqs



    GetTasqsLambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
        Action: lambda:invokeFunction
        FunctionName: !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:GetTasqsAppSyncSource"
        Principal: apigateway.amazonaws.com
        SourceArn:
            Fn::Join:
            - ''
            - - 'arn:aws:execute-api:'
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":"
              - Ref: RestApi
              - "/*"



    GetTasqs:
        Type: AWS::ApiGateway::Method
        DependsOn: GetTasqsLambdaPermission
        Properties:
        AuthorizationType: CUSTOM
        AuthorizerId:
            Ref: RestApiAuthorizer
        RestApiId:
            Ref: RestApi
        ResourceId:
            Ref: TasqsResource
        HttpMethod: GET
        Integration:
            Type: AWS
            IntegrationHttpMethod: POST
            Uri:
            Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:GetTasqsAppSyncSource"
              - "/invocations"
            IntegrationResponses:
            - StatusCode: 200
            RequestTemplates:
            "application/json": "{\"team\": \"$input.params('team')\",\"user_email\": \"$input.params('username')\"}"
        RequestModels:
            application/json:
            Ref: Model
        RequestParameters:
            method.request.header.Authorization: true
        MethodResponses:
        - ResponseModels:
            application/json: Empty
            StatusCode: 200


    PostTasqsLambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
        Action: lambda:invokeFunction
        FunctionName: !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:PostNewTasqSyncSource"
        Principal: apigateway.amazonaws.com
        SourceArn:
            Fn::Join:
            - ''
            - - 'arn:aws:execute-api:'
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":"
              - Ref: RestApi
              - "/*"



    PostTasqs:
        Type: AWS::ApiGateway::Method
        DependsOn: PostTasqsLambdaPermission
        Properties:
        AuthorizationType: CUSTOM
        AuthorizerId:
            Ref: RestApiAuthorizer
        RestApiId:
            Ref: RestApi
        ResourceId:
            Ref: TasqsResource
        HttpMethod: POST
        Integration:
            Type: AWS
            IntegrationHttpMethod: POST
            Uri:
            Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:PostNewTasqSyncSource"
              - "/invocations"
            IntegrationResponses:
            - StatusCode: 200
            RequestTemplates:
            "application/json": "{\"node_id\": $input.json('$.node_id'),\"assign_to_user\": $input.json('$.assign_to_user') ,\"type\": $input.json('$.type'),\"body\" : $input.json('$') }"
        RequestModels:
            application/json:
            Ref: Model
        RequestParameters:
            method.request.header.Authorization: true
        MethodResponses:
        - ResponseModels:
            application/json: Empty
            StatusCode: 200
        



    TasqsTasqResource:
        Type: AWS::ApiGateway::Resource
        Properties:
        RestApiId:
            Ref: RestApi
        ParentId:
            Ref: TasqsResource
        PathPart: "{tasq_id}"



    DeleteTasqTasqLambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
        Action: lambda:invokeFunction
        FunctionName: !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:DeleteTasqSyncSource"
        Principal: apigateway.amazonaws.com
        SourceArn:
            Fn::Join:
            - ''
            - - 'arn:aws:execute-api:'
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":"
              - Ref: RestApi
              - "/*"

        
    DeleteTasqTasqPrediction:
        Type: AWS::ApiGateway::Method
        DependsOn: DeleteTasqTasqLambdaPermission
        Properties:
        AuthorizationType: CUSTOM
        AuthorizerId:
            Ref: RestApiAuthorizer
        RestApiId:
            Ref: RestApi
        ResourceId:
            Ref: TasqsTasqResource
        HttpMethod: DELETE
        Integration:
            Type: AWS
            IntegrationHttpMethod: POST
            Uri:
            Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:DeleteTasqSyncSource"
              - "/invocations"
            IntegrationResponses:
            - StatusCode: 200
            RequestTemplates:
            "application/json": "{\"id\": \"$input.params('tasq_id')\"}"
        RequestModels:
            application/json:
            Ref: Model
        RequestParameters:
            method.request.header.Authorization: true
        MethodResponses:
        - ResponseModels:
            application/json: Empty
            StatusCode: 200


    GetTasqTasqLambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
        Action: lambda:invokeFunction
        FunctionName: !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:GetPredictionRowSyncSource"
        Principal: apigateway.amazonaws.com
        SourceArn:
            Fn::Join:
            - ''
            - - 'arn:aws:execute-api:'
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":"
              - Ref: RestApi
              - "/*"


    GetTasqTasqPrediction:
        Type: AWS::ApiGateway::Method
        DependsOn: GetTasqTasqLambdaPermission
        Properties:
        AuthorizationType: CUSTOM
        AuthorizerId:
            Ref: RestApiAuthorizer
        RestApiId:
            Ref: RestApi
        ResourceId:
            Ref: TasqsTasqResource
        HttpMethod: GET
        Integration:
            Type: AWS
            IntegrationHttpMethod: POST
            Uri:
            Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:GetPredictionRowSyncSource"
              - "/invocations"
            IntegrationResponses:
            - StatusCode: 200
            RequestTemplates:
            "application/json": "{\"id\": \"$input.params('tasq_id')\"}"
        RequestModels:
            application/json:
            Ref: Model
        RequestParameters:
            method.request.header.Authorization: true
        MethodResponses:
        - ResponseModels:
            application/json: Empty
            StatusCode: 200



    PutTasqTasqLambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
        Action: lambda:invokeFunction
        FunctionName: !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:UpdateTasqSyncSource"
        Principal: apigateway.amazonaws.com
        SourceArn:
            Fn::Join:
            - ''
            - - 'arn:aws:execute-api:'
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":"
              - Ref: RestApi
              - "/*"



    PutTasqTasqPrediction:
        Type: AWS::ApiGateway::Method
        DependsOn: PutTasqTasqLambdaPermission
        Properties:
        AuthorizationType: CUSTOM
        AuthorizerId:
            Ref: RestApiAuthorizer
        RestApiId:
            Ref: RestApi
        ResourceId:
            Ref: TasqsTasqResource
        HttpMethod: POST
        Integration:
            Type: AWS
            IntegrationHttpMethod: POST
            Uri:
            Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:UpdateTasqSyncSource"
              - "/invocations"
            IntegrationResponses:
            - StatusCode: 200
            RequestTemplates:
            "application/json": "{\"id\": \"$input.params('tasq_id')\", \"type\": $input.json('$.type') , \"assign_to_user\": $input.json('$.assign_to_user') ,\"node_id\": $input.json('$.node_id'),\"body\" : $input.json('$') }"
        RequestModels:
            application/json:
            Ref: Model
        RequestParameters:
            method.request.header.Authorization: true
        MethodResponses:
        - ResponseModels:
            application/json: Empty
            StatusCode: 200

