Resources:

############# RESOURCE - profile ############


  ProfileResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Fn::GetAtt:
        - RestApi
        - RootResourceId
      PathPart: users



  SignalsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Fn::GetAtt:
        - RestApi
        - RootResourceId
      PathPart: signals









  PostSignalsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt GetSignalsDataSyncSourceLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"



  PostSignals:
    Type: AWS::ApiGateway::Method
    DependsOn: PostSignalsLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: SignalsResource
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt GetSignalsDataSyncSourceLambdaFunction.Arn
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"headers\": $input.params().header, \"nodeid\": $input.json('$.nodeid') ,\"description\": $input.json('$.description') ,\"from_time\": $input.json('$.from_time') ,\"to_time\": $input.json('$.to_time') ,\"raw\": $input.json('$.raw') ,\"operator\": $input.json('$.operator') ,\"gorilla_compress\": $input.json('$.gorilla_compress'),\"reg_freq\": $input.json('$.reg_freq'),\"fillna_method\": $input.json('$.fillna_method'),\"body\" : $input.json('$') }"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200

  # GetSignals:
  #   Type: AWS::ApiGateway::Method
  #   DependsOn: GetSignalsLambdaPermission
  #   Properties:
  #     AuthorizationType: CUSTOM
  #     AuthorizerId:
  #       Ref: RestApiAuthorizer
  #     RestApiId:
  #       Ref: RestApi
  #     ResourceId:
  #       Ref: SignalsResource
  #     HttpMethod: 
  #     Integration:
  #       Type: AWS
  #       IntegrationHttpMethod: POST
  #       Uri: 
  #         Fn::Join:
  #         - ''
  #         - - 'arn:aws:apigateway:'
  #           - Ref: AWS::Region
  #           - ":lambda:path/2015-03-31/functions/"
  #           - !ImportValue "${{self:provider.environment.TasqDataServiceStackName}}:GetAllUsersSyncSource"
  #           - "/invocations"
  #       IntegrationResponses:
  #       - StatusCode: 200
  #     RequestModels:
  #       application/json:
  #         Ref: Model
  #     RequestParameters:
  #       method.request.header.Authorization: true
  #     MethodResponses:
  #     - ResponseModels:
  #         application/json: Empty
  #       StatusCode: 200







  # GetCleanDataSignalLambdaPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     Action: lambda:invokeFunction
  #     FunctionName: !ImportValue "${{self:provider.environment.TasqDataServiceStackName}}:CleanDataAppSyncSourcev2"
  #     Principal: apigateway.amazonaws.com
  #     SourceArn:
  #       Fn::Join:
  #       - ''
  #       - - 'arn:aws:execute-api:'
  #         - Ref: AWS::Region
  #         - ":"
  #         - Ref: AWS::AccountId
  #         - ":"
  #         - Ref: RestApi
  #         - "/*"

  # GetCleanDataSignals:
  #   Type: AWS::ApiGateway::Method
  #   DependsOn: GetCleanDataSignalLambdaPermission
  #   Properties:
  #     AuthorizationType: CUSTOM
  #     AuthorizerId:
  #       Ref: RestApiAuthorizer
  #     RestApiId:
  #       Ref: RestApi
  #     ResourceId:
  #       Ref: SignalsResource
  #     HttpMethod: GET
  #     Integration:
  #       Type: AWS
  #       IntegrationHttpMethod: POST
  #       Uri:
  #         Fn::Join:
  #         - ''
  #         - - 'arn:aws:apigateway:'
  #           - Ref: AWS::Region
  #           - ":lambda:path/2015-03-31/functions/"
  #           - !ImportValue "${{self:provider.environment.TasqDataServiceStackName}}:CleanDataAppSyncSourcev2"
  #           - "/invocations"
  #       IntegrationResponses:
  #       - StatusCode: 200
  #       # RequestTemplates:
  #       #   "application/json": "{\"description\": \"$input.params('description')\",\"downsample_method\": \"$input.params('downsample_method')\",\"fillna_method\": \"$input.params('fillna_method')\",\"from_time\": \"$input.params('from_time')\",\"gorilla_compress\": \"$input.params('gorilla_compress')\",\"nodeid\": \"$input.params('nodeid')\",\"operator\": \"$input.params('operator')\",\"raw\": \"$input.params('raw')\",\"reg_freq\": \"$input.params('reg_freq')\",\"to_time\": \"$input.params('to_time')\"}"
  #     RequestModels:
  #       application/json:
  #         Ref: Model
  #     RequestParameters:
  #       method.request.header.Authorization: true
  #     MethodResponses:
  #     - ResponseModels:
  #         application/json: Empty
  #       StatusCode: 200







  GetProfilesLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:GetAllUsersSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"


  GetProfiles:
    Type: AWS::ApiGateway::Method
    DependsOn: GetProfilesLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: ProfileResource
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: 
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:GetAllUsersSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200




  PostProfileLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:UserSignUpSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"



  PostProfile:
    Type: AWS::ApiGateway::Method
    DependsOn: PostProfileLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: ProfileResource
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:UserSignUpSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"first_name\": $input.json('$.first_name') ,\"last_name\": $input.json('$.last_name') ,\"user_email\": $input.json('$.email') ,\"phone_number\": $input.json('$.phone_number') ,\"roles\": $input.json('$.roles') ,\"phone_number\": $input.json('$.phone_number') ,\"accepting_tasqs\": $input.json('$.accepting_tasqs'),\"body\" : $input.json('$') }"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200




  ProfileUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Ref: ProfileResource
      PathPart: "{user}"





  # GetProfileUserLambdaPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     Action: lambda:invokeFunction
  #     FunctionName: !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:GetUserDetailsSyncSource"
  #     Principal: apigateway.amazonaws.com
  #     SourceArn:
  #       Fn::Join:
  #       - ''
  #       - - 'arn:aws:execute-api:'
  #         - Ref: AWS::Region
  #         - ":"
  #         - Ref: AWS::AccountId
  #         - ":"
  #         - Ref: RestApi
  #         - "/*"

  # # GetProfileUser:
  # #   Type: AWS::ApiGateway::Method
  # #   DependsOn: GetProfileUserLambdaPermission
  # #   Properties:
  # #     AuthorizationType: CUSTOM
  # #     AuthorizerId:
  # #       Ref: RestApiAuthorizer
  # #     RestApiId:
  # #       Ref: RestApi
  # #     ResourceId:
  # #       Ref: ProfileUserResource
  # #     HttpMethod: GET
  # #     Integration:
  # #       Type: AWS
  # #       IntegrationHttpMethod: POST
  # #       Uri:
  # #         Fn::Join:
  # #         - ''
  # #         - - 'arn:aws:apigateway:'
  # #           - Ref: AWS::Region
  # #           - ":lambda:path/2015-03-31/functions/"
  # #           - !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:GetUserDetailsSyncSource"
  # #           - "/invocations"
  # #       IntegrationResponses:
  # #       - StatusCode: 200
  # #       RequestTemplates:
  # #         "application/json": "{\"username\": \"$input.params('user')\"}"
  # #     RequestModels:
  # #       application/json:
  # #         Ref: Model
  # #     RequestParameters:
  # #       method.request.header.Authorization: true
  # #     MethodResponses:
  # #     - ResponseModels:
  # #         application/json: Empty
  # #       StatusCode: 200








  ProfileOperatorUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Ref: ProfileUserResource
      PathPart: "{operator}"





  GetProfileUserLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:GetUserDetailsSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  GetProfileUser:
    Type: AWS::ApiGateway::Method
    DependsOn: GetProfileUserLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: ProfileOperatorUserResource
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:GetUserDetailsSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"username\": \"$input.params('user')\",\"operator\": \"$input.params('operator')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200















  PutProfileUserLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:UpdateProfileSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"



  PutProfileUser:
    Type: AWS::ApiGateway::Method
    DependsOn: PutProfileUserLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: ProfileUserResource
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:UpdateProfileSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"username\": \"$input.params('user')\",\"first_name\": $input.json('$.first_name'),\"last_name\": $input.json('$.last_name'),\"team\": $input.json('$.team') ,\"roles\": $input.json('$.roles') ,\"email\": $input.json('$.email') ,\"phone_number\": $input.json('$.phone_number') ,\"accepting_tasqs\": $input.json('$.accepting_tasqs'),\"body\" : $input.json('$') }"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200


