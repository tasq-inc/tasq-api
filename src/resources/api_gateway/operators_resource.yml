Resources:

        ############# RESOURCE - operators ############
  OperatorsAlertResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Fn::GetAtt:
        - RestApi
        - RootResourceId
      PathPart: operators


  PostOperatorAlertLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:PostOperatorAlertSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  PostOperatorAlert:
    Type: AWS::ApiGateway::Method
    DependsOn: PostOperatorAlertLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: OperatorsAlertResource
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:PostOperatorAlertSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"visibility\": $input.json('visibility'),\"msg\": $input.json('msg'),\"operator\": $input.json('operator')}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200
