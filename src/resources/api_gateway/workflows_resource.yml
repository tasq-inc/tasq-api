Resources:

        ############# RESOURCE - workflow ############

  WorkflowResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Fn::GetAtt:
        - RestApi
        - RootResourceId
      PathPart: workflows

# Post Workflow Function
  PostWorkflowLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:PostWorkflowSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  PostWorkflow:
    Type: AWS::ApiGateway::Method
    DependsOn: PostWorkflowLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: WorkflowResource
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:PostWorkflowSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"settings\": \"$input.params('settings')\",\"username\": \"$input.params('username')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200


  

# Get All Workflows Function

  GetWorkflowsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:GetAllWorkflowsSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  GetWorkflows:
    Type: AWS::ApiGateway::Method
    DependsOn: GetWorkflowsLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: WorkflowResource
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:GetAllWorkflowsSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200



        


  WorkflowUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Ref: WorkflowResource
      PathPart: "{workflow_id}"



  PutWorkflowLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:UpdateWorkflowSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"



  PutWorkflow:
    Type: AWS::ApiGateway::Method
    DependsOn: PutWorkflowLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: WorkflowUserResource
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:UpdateWorkflowSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"id\": \"$input.params('workflow_id')\",\"settings\": \"$input.params('settings')\",\"username\": \"$input.params('username')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200


  DeleteWorkflowPredictionLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:DeleteWorkflowSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"


  DeleteWorkflowPrediction:
    Type: AWS::ApiGateway::Method
    DependsOn: DeleteWorkflowPredictionLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: WorkflowUserResource
      HttpMethod: DELETE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:DeleteWorkflowSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"id\": \"$input.params('workflow_id')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200


  GetWorkflowPredictionLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:GetWorkflowSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  GetWorkflowPrediction:
    Type: AWS::ApiGateway::Method
    DependsOn: GetWorkflowPredictionLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: WorkflowUserResource
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:GetWorkflowSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"id\": \"$input.params('workflow_id')\",\"days\": \"$input.params('days')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200


