Resources:

        ############# RESOURCE - tickets ############



  TicketResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Fn::GetAtt:
        - RestApi
        - RootResourceId
      PathPart: tickets

  PostTicketsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.TasqAnalyticsStackName}}:SubmitTicketSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  PostTickets:
    Type: AWS::ApiGateway::Method
    DependsOn: PostTicketsLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: TicketResource
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.TasqAnalyticsStackName}}:SubmitTicketSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"username\": $input.json('$.username'), \"description\": $input.json('$.description'), \"ticket_title\": $input.json('$.ticket_title'), \"issue_type\": $input.json('$.issue_type'), \"page\": $input.json('$.page'), \"operator\": $input.json('$.operator'), \"body\" : $input.json('$') }"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200

  GetTicketsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.TasqAnalyticsStackName}}:GetTrackedTicketsSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  GetTickets:
    Type: AWS::ApiGateway::Method
    DependsOn: GetTicketsLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: TicketResource
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.TasqAnalyticsStackName}}:GetTrackedTicketsSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"id\": \"$input.params('ticket_id')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200






  TicketIDResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Ref: TicketResource
      PathPart: "{ticket_id}"

  # PutTicket:
  #   Type: AWS::ApiGateway::Method
  #   DependsOn: LambdaPermission
  #   Properties:
  #     AuthorizationType: CUSTOM
  #     AuthorizerId:
  #       Ref: RestApiAuthorizer
  #     RestApiId:
  #       Ref: RestApi
  #     ResourceId:
  #       Ref: TicketIDResource
  #     HttpMethod: PUT
  #     Integration:
  #       Type: AWS
  #       IntegrationHttpMethod: POST
  #       Uri:
  #         Fn::Join:
  #         - ''
  #         - - 'arn:aws:apigateway:'
  #           - Ref: AWS::Region
  #           - ":lambda:path/2015-03-31/functions/"
  #           - Fn::GetAtt:
  #             - Lambda
  #             - Arn
  #           - "/invocations"
  #       IntegrationResponses:
  #       - StatusCode: 200
  #       RequestTemplates:
  #         application/json: '{"action": "put", "body": $input.json(''$'')}'
  #     RequestModels:
  #       application/json:
  #         Ref: Model
  #     RequestParameters:
  #       method.request.header.Authorization: true
  #     MethodResponses:
  #     - ResponseModels:
  #         application/json: Empty
  #       StatusCode: 200



  DeleteTicketLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.TasqAnalyticsStackName}}:DeleteTicketSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  DeleteTicket:
    Type: AWS::ApiGateway::Method
    DependsOn: DeleteTicketLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: TicketIDResource
      HttpMethod: DELETE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.TasqAnalyticsStackName}}:DeleteTicketSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"id\": \"$input.params('ticket_id')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200


  GetTicketLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.TasqAnalyticsStackName}}:GetTicketSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  GetTicket:
    Type: AWS::ApiGateway::Method
    DependsOn: GetTicketLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: TicketIDResource
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.TasqAnalyticsStackName}}:GetTicketSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"id\": \"$input.params('ticket_id')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200


      
