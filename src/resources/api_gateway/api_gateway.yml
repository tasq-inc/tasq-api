Resources:

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Api



  RestApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerCredentials:
        Fn::GetAtt:
        - RestApiAuthorizerRole
        - Arn
      AuthorizerResultTtlInSeconds: 300
      AuthorizerUri: 
        Fn::Join:
        - ''
        - - 'arn:aws:apigateway:'
          - Ref: AWS::Region
          - ":lambda:path/2015-03-31/functions/"
          - "${{file(./src/resources/config.yml):LambdaAuthArn}}"
          - "/invocations"
      IdentitySource: method.request.header.Authorization
      Name: api-authorizer
      RestApiId:
        Ref: RestApi
      Type: TOKEN

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json

          def lambda_handler(event, context):
              # TODO implement
              return {
                  'statusCode': 200,
                  'body': 'Hello from Lambda!!!!!!!!!!!!'
              }
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - AuthLambdaRole
        - Arn
      Runtime: python3.7
      Timeout: 60




  AuthLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: '1'
            Effect: Allow
            Action:
            - dynamodb:GetItem
            Resource:
            - Fn::Join:
              - ''
              - - 'arn:aws:dynamodb:'
                - Ref: AWS::Region
                - ":"
                - Ref: AWS::AccountId
                - ":table/auth-token"



  RestApiAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: lambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: lambda:invokeFunction
            Resource: 
              - "${{file(./src/resources/config.yml):LambdaAuthArn}}"
              


  Model:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Name: user
      RestApiId:
        Ref: RestApi
      Schema:
        "$schema": http://json-schema.org/draft-04/schema#
        title: user
        type: object
        additionalProperties: false
        properties:
          id:
            type: string
          name:
            type: string
        required:
        - id
        - name





# "${{self:provider.environment.DetectStateChangeStackName}}:"
# "${{self:provider.environment.TasqAnalyticsStackName}}:"
# "${{self:provider.environment.AssignUserTasqStackName}}:"

############# RESOURCE - profile ############


  ProfileResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Fn::GetAtt:
        - RestApi
        - RootResourceId
      PathPart: users


  GetProfilesLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:GetAllUsersSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"


  GetProfiles:
    Type: AWS::ApiGateway::Method
    DependsOn: GetProfilesLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: ProfileResource
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: 
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:GetAllUsersSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200




  PostProfileLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:UserSignUpSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"



  PostProfile:
    Type: AWS::ApiGateway::Method
    DependsOn: PostProfileLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: ProfileResource
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:UserSignUpSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"UserEmail\": \"$input.params('email')\",\"PhoneNumber\": \"$input.params('phone_number')\",\"Roles\": \"$input.params('roles')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200



  ProfileUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Ref: ProfileResource
      PathPart: "{user}"





  GetProfileUserLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:GetUserDetailsSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  GetProfileUser:
    Type: AWS::ApiGateway::Method
    DependsOn: GetProfileUserLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: ProfileUserResource
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:GetUserDetailsSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"username\": \"$input.params('username')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200


  PutProfileUserLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:UpdateProfileSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"



  PutProfileUser:
    Type: AWS::ApiGateway::Method
    DependsOn: PutProfileUserLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: ProfileUserResource
      HttpMethod: PUT
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:UpdateProfileSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"Username\": \"$input.params('username')\",\"Team\": \"$input.params('teams')\",\"Roles\": \"$input.params('roles')\",\"UserEmail\": \"$input.params('email')\",\"PhoneNumber\": \"$input.params('phone_number')\",\"AcceptingTasqs\": \"$input.params('accepting_tasqs')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200




        ############# RESOURCE - responses ############

  ResponsesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Fn::GetAtt:
        - RestApi
        - RootResourceId
      PathPart: responses




  GetResponseLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:GetUserResponsesSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"


  GetResponse:
    Type: AWS::ApiGateway::Method
    DependsOn: GetResponseLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: ResponsesResource
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:GetUserResponsesSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200





  ResponsesUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Ref: ResponsesResource
      PathPart: "{response_id}"



  PostUserResponseLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:UpdateUserResponseSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  PostUserResponse:
    Type: AWS::ApiGateway::Method
    DependsOn: PostUserResponseLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: ResponsesResource
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:UpdateUserResponseSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"id\": \"$input.params('tasq_id')\",\"PredictionID\": \"$input.params('id')\",\"ResponseData\": \"$input.params('response_data')\",\"MarkAsComplete\": \"$input.params('mark_as_complete')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200



  PutResponseUserPredictionLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:UpdateUserResponseSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  PutResponseUserPrediction:
    Type: AWS::ApiGateway::Method
    DependsOn: PutResponseUserPredictionLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: ResponsesUserResource
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:UpdateUserResponseSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"id\": \"$input.params('response_id')\",\"mark_as_complete\": $input.json('$.mark_as_complete') ,\"response_data\": $input.json('$.response_data'),\"body\" : $input.json('$') }"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200


  DeleteResponseUserPredictionLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:DeleteUserResponseSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"


  DeleteResponseUserPrediction:
    Type: AWS::ApiGateway::Method
    DependsOn: DeleteResponseUserPredictionLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: ResponsesUserResource
      HttpMethod: DELETE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:DeleteUserResponseSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"PredictionID\": \"$input.params('id')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200



  GetResponseUserPredictionLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:GetUserResponseSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"



  GetResponseUserPrediction:
    Type: AWS::ApiGateway::Method
    DependsOn: GetResponseUserPredictionLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: ResponsesUserResource
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:GetUserResponseSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"prediction_id\": \"$input.params('id')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200
  



  ############# RESOURCE - tasqs ############


  TasqsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Fn::GetAtt:
        - RestApi
        - RootResourceId
      PathPart: tasqs



  GetTasqsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:GetAllTasqsSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"



  GetTasqs:
    Type: AWS::ApiGateway::Method
    DependsOn: GetTasqsLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: TasqsResource
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:GetAllTasqsSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"team\": \"$input.params('team')\",\"username\": \"$input.params('username')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200


  PostTasqsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:PostNewTasqSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"



  PostTasqs:
    Type: AWS::ApiGateway::Method
    DependsOn: PostTasqsLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: TasqsResource
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:PostNewTasqSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"AssignedToUsername\": \"$input.params('assign_to_user')\",\"NodeID\": \"$input.params('node_id')\",\"PredictionType\": \"$input.params('type')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200
      



  TasqsTasqResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Ref: TasqsResource
      PathPart: "{tasq_id}"



  DeleteTasqTasqLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:DeleteTasqSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

      
  DeleteTasqTasqPrediction:
    Type: AWS::ApiGateway::Method
    DependsOn: DeleteTasqTasqLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: TasqsTasqResource
      HttpMethod: DELETE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:DeleteTasqSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"PredictionID\": \"$input.params('id')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200


  GetTasqTasqLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:GetPredictionRowSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"


  GetTasqTasqPrediction:
    Type: AWS::ApiGateway::Method
    DependsOn: GetTasqTasqLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: TasqsTasqResource
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:GetPredictionRowSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"PredictionID\": \"$input.params('id')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200



  PutTasqTasqLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:UpdateTasqSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"



  PutTasqTasqPrediction:
    Type: AWS::ApiGateway::Method
    DependsOn: PutTasqTasqLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: TasqsTasqResource
      HttpMethod: PUT
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.DetectStateChangeStackName}}:UpdateTasqSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"PredictionID\": \"$input.params('id')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200


        ############# RESOURCE - tickets ############



  TicketResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Fn::GetAtt:
        - RestApi
        - RootResourceId
      PathPart: tickets

  PostTicketsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.TasqAnalyticsStackName}}:SubmitTicketSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  PostTickets:
    Type: AWS::ApiGateway::Method
    DependsOn: PostTicketsLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: TicketResource
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.TasqAnalyticsStackName}}:SubmitTicketSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"Username\": \"$input.params('username')\",\"Description\": \"$input.params('description')\",\"TicketTitle\": \"$input.params('ticket_title')\",\"IssueType\": \"$input.params('issue_type')\",\"Page\": \"$input.params('page')\",\"Operator\": \"$input.params('operator')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200

  GetTicketsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.TasqAnalyticsStackName}}:GetTrackedTicketsSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  GetTickets:
    Type: AWS::ApiGateway::Method
    DependsOn: GetTicketsLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: TicketResource
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.TasqAnalyticsStackName}}:GetTrackedTicketsSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"IssueType\": \"$input.params('issue_type')\",\"Username\": \"$input.params('username')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200






  TicketIDResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Ref: TicketResource
      PathPart: "{ticket_id}"

  # PutTicket:
  #   Type: AWS::ApiGateway::Method
  #   DependsOn: LambdaPermission
  #   Properties:
  #     AuthorizationType: CUSTOM
  #     AuthorizerId:
  #       Ref: RestApiAuthorizer
  #     RestApiId:
  #       Ref: RestApi
  #     ResourceId:
  #       Ref: TicketIDResource
  #     HttpMethod: PUT
  #     Integration:
  #       Type: AWS
  #       IntegrationHttpMethod: POST
  #       Uri:
  #         Fn::Join:
  #         - ''
  #         - - 'arn:aws:apigateway:'
  #           - Ref: AWS::Region
  #           - ":lambda:path/2015-03-31/functions/"
  #           - Fn::GetAtt:
  #             - Lambda
  #             - Arn
  #           - "/invocations"
  #       IntegrationResponses:
  #       - StatusCode: 200
  #       RequestTemplates:
  #         application/json: '{"action": "put", "body": $input.json(''$'')}'
  #     RequestModels:
  #       application/json:
  #         Ref: Model
  #     RequestParameters:
  #       method.request.header.Authorization: true
  #     MethodResponses:
  #     - ResponseModels:
  #         application/json: Empty
  #       StatusCode: 200



  DeleteTicketLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.TasqAnalyticsStackName}}:DeleteTicketSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  DeleteTicket:
    Type: AWS::ApiGateway::Method
    DependsOn: DeleteTicketLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: TicketIDResource
      HttpMethod: DELETE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.TasqAnalyticsStackName}}:DeleteTicketSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"TicketId\": \"$input.params('id')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200


  GetTicketLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.TasqAnalyticsStackName}}:GetTicketSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  GetTicket:
    Type: AWS::ApiGateway::Method
    DependsOn: GetTicketLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: TicketIDResource
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.TasqAnalyticsStackName}}:GetTicketSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"TicketId\": \"$input.params('id')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200


      


        ############# RESOURCE - workflow ############

  WorkflowResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Fn::GetAtt:
        - RestApi
        - RootResourceId
      PathPart: workflows

  PostWorkflowLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:PostWorkflowSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  PostWorkflow:
    Type: AWS::ApiGateway::Method
    DependsOn: PostWorkflowLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: WorkflowResource
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:PostWorkflowSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"WorkflowDetailsID\": \"$input.params('id')\",\"Username\": \"$input.params('username')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200


  

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Fn::GetAtt:
        - Lambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"


  GetWorkflowsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:GetAllWorkflowsSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  GetWorkflows:
    Type: AWS::ApiGateway::Method
    DependsOn: GetWorkflowsLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: WorkflowResource
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:GetAllWorkflowsSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200



        


  WorkflowUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Ref: WorkflowResource
      PathPart: "{workflow_id}"



  PutWorkflowLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:UpdateWorkflowSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"



  PutWorkflow:
    Type: AWS::ApiGateway::Method
    DependsOn: PutWorkflowLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: WorkflowUserResource
      HttpMethod: PUT
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:UpdateWorkflowSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"WorkflowDetailsID\": \"$input.params('id')\",\"Settings\": \"$input.params('settings')\",\"Username\": \"$input.params('username')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200


  DeleteWorkflowPredictionLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:DeleteWorkflowSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"


  DeleteWorkflowPrediction:
    Type: AWS::ApiGateway::Method
    DependsOn: DeleteWorkflowPredictionLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: WorkflowUserResource
      HttpMethod: DELETE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:DeleteWorkflowSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"WorkflowDetailsID\": \"$input.params('id')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200


  GetWorkflowPredictionLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:GetWorkflowSyncSource"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  GetWorkflowPrediction:
    Type: AWS::ApiGateway::Method
    DependsOn: GetWorkflowPredictionLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: RestApiAuthorizer
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: WorkflowUserResource
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - !ImportValue "${{self:provider.environment.AssignUserTasqStackName}}:GetWorkflowSyncSource"
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"WorkflowDetailsID\": \"$input.params('id')\",\"AssignmentCountDays\": \"$input.params('days')\"}"
      RequestModels:
        application/json:
          Ref: Model
      RequestParameters:
        method.request.header.Authorization: true
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        StatusCode: 200




  StageV1Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ProfileResource
    Properties:
      RestApiId:
        Ref: RestApi




  StageV1:
    Type: AWS::ApiGateway::Stage
    DependsOn: StageV1Deployment
    Properties:
      StageName: v1
      Description: 'API Version 1'
      DeploymentId:
        Ref: StageV1Deployment
      RestApiId:
        Ref: RestApi
      # AutoDeploy: true

  # ApiCustomDomainMapping:
  #   Type: AWS::ApiGateway::BasePathMapping
  #   Properties: 
  #     BasePath: v1
  #     DomainName: "api.tasqinc.com"
  #     RestApiId:
  #       Ref: RestApi
  #     Stage: 
  #       Ref: StageV1

