Resources:

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "${{file(./src/resources/config.yml):TasqAPIName}}"
      

  RestApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerCredentials:
        Fn::GetAtt:
        - RestApiAuthorizerRole
        - Arn
      AuthorizerResultTtlInSeconds: 300
      AuthorizerUri: 
        Fn::Join:
        - ''
        - - 'arn:aws:apigateway:'
          - Ref: AWS::Region
          - ":lambda:path/2015-03-31/functions/"
          - "${{file(./src/resources/config.yml):LambdaAuthArn}}"
          - "/invocations"
      IdentitySource: method.request.header.Authorization
      Name: api-authorizer
      RestApiId:
        Ref: RestApi
      Type: TOKEN




  AuthLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: '1'
            Effect: Allow
            Action:
            - dynamodb:GetItem
            Resource:
            - Fn::Join:
              - ''
              - - 'arn:aws:dynamodb:'
                - Ref: AWS::Region
                - ":"
                - Ref: AWS::AccountId
                - ":table/auth-token"



  RestApiAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: lambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: lambda:invokeFunction
            Resource: 
              - "${{file(./src/resources/config.yml):LambdaAuthArn}}"
              


  Model:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Name: user
      RestApiId:
        Ref: RestApi
      Schema:
        "$schema": http://json-schema.org/draft-04/schema#
        title: user
        type: object
        additionalProperties: false
        properties:
          id:
            type: string
          name:
            type: string
        required:
        - id
        - name


  StageV1Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ProfileResource
    Properties:
      RestApiId:
        Ref: RestApi



  StageV1:
    Type: AWS::ApiGateway::Stage
    DependsOn: StageV1Deployment
    Properties:
      StageName: v1
      Description: 'API Version 1'
      DeploymentId:
        Ref: StageV1Deployment
      RestApiId:
        Ref: RestApi
      # AutoDeploy: true


  ApiCustomDomainMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties: 
      BasePath: v1
      DomainName: "${{file(./src/resources/config.yml):TasqAPIDomain-${{self:provider.stage}}}}"
      RestApiId:
        Ref: RestApi
      Stage: 
        Ref: StageV1

