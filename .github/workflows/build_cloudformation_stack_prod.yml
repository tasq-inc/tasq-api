name: CI

on:
  push:
    branches:
    - prod

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Building environment...
      run: |
        mkdir ~/.aws
        touch ~/.aws/credentials
        touch ~/.aws/config
        git tag v1

        echo "[default]
        aws_access_key_id = ${{secrets.AWS_ACCESS_KEY_ID}}
        aws_secret_access_key = ${{secrets.AWS_SECRET_ACCESS_KEY}}
        region = us-east-2" > ~/.aws/credentials

        echo "[default]
        output = text
        region = us-east-2" > ~/.aws/config

        npm install serverless-python-requirements

        git clone https://${{secrets.GITHUBFULLACCESSTOKEN}}@github.com/tasq-inc/tasq-codepipeline-repo.git
        cp tasq-codepipeline-repo/ecs_pull_newest_image.py .

        python --version
        curl -O https://bootstrap.pypa.io/get-pip.py
        python3 get-pip.py
        pip install --upgrade pip
        pip3 install PyYAML
        pip3 install boto3

    - name: Deploying stack...
      run: |

        # python3 tasq-codepipeline-repo/include_pipelines_in_stack.py dev
        sh deploy_stack.sh

    # - name: Running unit tests
    #   run: |
    #
    #     add-apt-repository main
    #     apt update
    #     apt-get install -y unixodbc-dev
    #     apt-get install python3-mysql.connector
    #     apt-get install jq
    #     find ./ -type f -name "requirements_for_testing.txt" -exec pip3 install -r  "{}"  \;
    #     cp tasq-codepipeline-repo/requirements.txt .
    #     pip3 install -r requirements.txt
    #     CURRENT_REPO="$(python3 tasq-codepipeline-repo/get_repo_name.py)"
    #
    #     cd ./tests/
    #     py.test --html=test_results.html
    #     cd ..
    #
    #     echo testing completed on `date`
    #     aws s3 cp --acl public-read ./tests/test_results.html s3://code-pipeline-test-results/${CURRENT_REPO}/test_results_$(date +%Y-%m-%d-%H:%M:%S).html
    #     aws s3 cp --recursive --acl public-read ./tests/assets s3://code-pipeline-test-results/${CURRENT_REPO}/assets/
    #
    #
    #     apt-get install jq
    #     find ./ -type f -name "requirements_for_testing.txt" -exec pip3 install -r  "{}"  \;
    #     rm -rf tasq-codepipeline-repo
    #     aws secretsmanager get-secret-value --secret-id github/code-pipeline/full-access-token > git_hub_access_token.json
    #     GIT_HUB_ACCESS_TOKEN=$(jq -r '.SecretString' git_hub_access_token.json)
    #
    #
    #     echo Building the Docker image...
    #     cp tasq-codepipeline-repo/build_and_push_images_in_path.py .
    #     python3 build_and_push_images_in_path.py "us-east-2" $CURRENT_REPO
    #
    #     echo Build completed on `date`, image was pushed
    #     python3 tasq-codepipeline-repo/ecs_pull_newest_image.py

    - name: Cleaning up...
      run: |
        echo "Cleaned up"
